#region Informations
///////////////////////////////////////////////////////////
//  Client.cs
//  Implementation of the Class BastetDataAccess
//  Generated by Enterprise Architect
//  Created on:      01-mar.-2006 11:51:11
//  Original author: D.V. Mussuma
///////////////////////////////////////////////////////////
#endregion

using System;
using System.Data;
using System.Text;

using BastetCommon=TNS.AdExpress.Bastet.Common;
using DBSchema=TNS.AdExpress.Constantes.DB.Schema;
using DBTables=TNS.AdExpress.Constantes.DB.Tables;
using AnubisBastet=TNS.AdExpress.Anubis.Bastet;
using DBConstantes=TNS.AdExpress.Constantes.DB;
using TNS.AdExpress.Bastet.Web;
using TNS.AdExpress.Domain.DataBaseDescription;


namespace TNS.AdExpress.Anubis.Bastet.DataAccess
{
	/// <summary>
	/// Description résumée de Company.
	/// </summary>
	public class Company
	{
		#region Top des sociétés qui se connectent		

		/// <summary>
		/// Top  des sociétés qui se connectent le plus
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Données Top  des sociétés qui se connectent le plus</returns>
		public static DataTable  TopConnected(BastetCommon.Parameters parameters){
			try{
				#region Requête
				StringBuilder sql = new StringBuilder(3000);
				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				Table groupContactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContactGroup);

				//select
				sql.Append(" select sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER) as CONNECTION_NUMBER,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_8_12) as CONNECTION_NUMBER_8_12");
				sql.Append(",sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_12_16) as CONNECTION_NUMBER_12_16,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_16_20) as CONNECTION_NUMBER_16_20");
				sql.Append(",sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_20_24) as CONNECTION_NUMBER_20_24,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_24_8) as CONNECTION_NUMBER_24_8");
				sql.Append(","+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,group_contact");
				//From
				sql.Append(" from "+connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ,"+loginTable.SqlWithPrefix+","+contactTable.SqlWithPrefix
					+","+groupContactTable.SqlWithPrefix
					+","+addressTable.SqlWithPrefix+","+companyTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + parameters.PeriodEndDate.ToString("yyyyMMdd"));
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+connectionByLoginTable.Prefix+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_group_contact(+)="+groupContactTable.Prefix+".id_group_contact ");
				sql.Append(" and "+groupContactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
				//Gourp by
				sql.Append(" group by  "+companyTable.Prefix+".id_company,"+companyTable.Prefix+".company,group_contact");
				//Order by
				sql.Append(" order by  CONNECTION_NUMBER  desc,company,group_contact");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnected : Impossible d'obtenir la liste des sociétés les plus connectés ", err));
			}
			
	
		}
		#endregion

		#region Top connections par mois	

		/// <summary>
		/// Top connections sociétés par mois
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Top connections clients par mois </returns>
		public static DataTable  TopConnectedByMonth(BastetCommon.Parameters parameters){
			try{
				#region Requête

				StringBuilder sql = new StringBuilder(3000);
				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				Table groupContactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContactGroup);

				//select	
				sql.Append(" select id_company,company,group_contact,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,group_contact ");
				sql.Append(",TO_NUMBER(SUBSTR(TO_CHAR(DATE_CONNECTION),1,6)) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ," + loginTable.SqlWithPrefix + "," + contactTable.SqlWithPrefix
					+ "," + groupContactTable.SqlWithPrefix
					+ "," + addressTable.SqlWithPrefix + "," + companyTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + parameters.PeriodEndDate.ToString("yyyyMMdd"));
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+connectionByLoginTable.Prefix+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_group_contact(+)="+groupContactTable.Prefix+".id_group_contact ");
				sql.Append(" and "+groupContactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
							
				//Gourp by
				sql.Append(" group by "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,group_contact,date_connection,connection_number");
				
				sql.Append(" ) group by date_connection,id_company,company,group_contact ");
                //Order by
                sql.Append(" order by  date_connection, company, id_company ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnectedByMonth : Impossible d'obtenir la liste des Top connections sociétés par mois ", err));
			}
			
	
		}
		#endregion

		#region Top connections par jour nommé	

		/// <summary>
		/// Top connections sociétés par jour nommé	
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Top connections clients par jour nommé	 </returns>
		public static DataTable  TopConnectedByDay(BastetCommon.Parameters parameters){
			try{
				#region Requête

				StringBuilder sql = new StringBuilder(3000);
				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				Table groupContactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContactGroup);

				//select	
				sql.Append(" select id_company,company,group_contact,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,group_contact ");
				sql.Append(",TO_NUMBER(TO_CHAR(TO_DATE(DATE_CONNECTION,'YYYY-MM-DD'),'D')) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ," + loginTable.SqlWithPrefix + "," + contactTable.SqlWithPrefix
					+ "," + groupContactTable.SqlWithPrefix
					+ "," + addressTable.SqlWithPrefix + "," + companyTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + parameters.PeriodEndDate.ToString("yyyyMMdd"));
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+connectionByLoginTable.Prefix+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_group_contact(+)="+groupContactTable.Prefix+".id_group_contact ");
				sql.Append(" and "+groupContactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
							
				//Gourp by
				sql.Append(" group by "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,group_contact,date_connection,connection_number");
				
				sql.Append(" ) group by date_connection,id_company,company,group_contact ");
                //Order by
                sql.Append(" order by  date_connection, company, id_company ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnectedByDay : Impossible d'obtenir la liste des Top connections sociétés par jour nommé ", err));
			}
			
	
		}
		#endregion
	}
}
