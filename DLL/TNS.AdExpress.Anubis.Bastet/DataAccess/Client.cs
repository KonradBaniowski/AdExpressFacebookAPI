#region Informations
///////////////////////////////////////////////////////////
//  Client.cs
//  Implementation of the Class BastetDataAccess
//  Generated by Enterprise Architect
//  Created on:      17-nov.-2005 16:51:11
//  Original author: D.V. Mussuma
///////////////////////////////////////////////////////////
#endregion

using System;
using System.Data;
using System.Text;

using BastetCommon=TNS.AdExpress.Bastet.Common;
using DBSchema=TNS.AdExpress.Constantes.DB.Schema;
using DBTables=TNS.AdExpress.Constantes.DB.Tables;
using AnubisBastet=TNS.AdExpress.Anubis.Bastet;
using DBConstantes=TNS.AdExpress.Constantes.DB;
using TNS.AdExpress.Bastet.Web;
using TNS.AdExpress.Domain.DataBaseDescription;



namespace TNS.AdExpress.Anubis.Bastet.DataAccess {
	/// <summary>
	/// Obtient les données pour la génération du fichier excel
	/// </summary>
	public class Client {

        #region Variables
        /// <summary>
        /// Parameters
        /// </summary>
	    protected BastetCommon.Parameters _parameters;
        #endregion

        #region Constructor
        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="parameters">Parameters</param>
        public Client(BastetCommon.Parameters parameters)
        {
            _parameters = parameters;
        }
	    #endregion


        #region Top des clients qui se connectent

        /// <summary>
		/// Top  des clients qui se connectent le plus
		/// </summary>
		/// <returns>Données Top  des clients qui se connectent le plus</returns>
		public virtual DataTable  TopConnected(){
            var sql = new StringBuilder(3000);
			try{
				#region Requête
				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				
				//select				
				sql.Append(" select sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER) as CONNECTION_NUMBER,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_8_12) as CONNECTION_NUMBER_8_12");
				sql.Append(",sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_12_16) as CONNECTION_NUMBER_12_16,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_16_20) as CONNECTION_NUMBER_16_20");
				sql.Append(",sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_20_24) as CONNECTION_NUMBER_20_24,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_24_8) as CONNECTION_NUMBER_24_8");
				sql.Append(","+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,"+connectionByLoginTable.Prefix+".id_login,"+loginTable.Prefix+".login ");
				//From
				sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ," + companyTable.SqlWithPrefix + "," + contactTable.SqlWithPrefix
					+","+addressTable.SqlWithPrefix+","+loginTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
				//Gourp by
				sql.Append(" group by  "+companyTable.Prefix+".id_company,"+companyTable.Prefix+".company,"+connectionByLoginTable.Prefix+".id_login,"+loginTable.Prefix+".login ");
				//Order by
				sql.Append(" order by  CONNECTION_NUMBER  desc,"+loginTable.Prefix+".login ");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" TopConnected : Impossible to get the list of most connected clients. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region Top connections par type de client	

		/// <summary>
		/// Top  des connections par type de client 
		/// </summary>
		/// <returns>Données Top  connections par type de client </returns>
        public virtual DataTable TopTypeConnected() {
            var sql = new StringBuilder(3000);
			try{
				#region Requête
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				Table groupContactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContactGroup);

				//select
				sql.Append(" select sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER) as CONNECTION_NUMBER,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_8_12) as CONNECTION_NUMBER_8_12");
				sql.Append(",sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_12_16) as CONNECTION_NUMBER_12_16,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_16_20) as CONNECTION_NUMBER_16_20");
				sql.Append(",sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_20_24) as CONNECTION_NUMBER_20_24,sum("+connectionByLoginTable.Prefix+".CONNECTION_NUMBER_24_8) as CONNECTION_NUMBER_24_8");
				sql.Append(",group_contact ");
				//From
				sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ,"+loginTable.SqlWithPrefix+","+contactTable.SqlWithPrefix
					+ "," + groupContactTable.SqlWithPrefix);
					
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_group_contact(+)="+groupContactTable.Prefix+".id_group_contact ");
				sql.Append(" and "+groupContactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);			
				//Gourp by
				sql.Append(" group by group_contact");
				//Order by
				sql.Append(" order by  CONNECTION_NUMBER  desc,group_contact");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" TopConnected : Impossible to get most connected clients list. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region Top connections par mois	

		/// <summary>
		/// Top connections clients par mois
		/// </summary>
		/// <returns>Top connections clients par mois </returns>
        public virtual DataTable TopConnectedByMonth() {
            var sql = new StringBuilder(3000);
			try{
				#region Requête

				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				
				//select	
				sql.Append(" select id_company,company,id_login ,login,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,"+connectionByLoginTable.Prefix+".id_login ,"+loginTable.Prefix+".login");
				sql.Append(",TO_NUMBER(SUBSTR(TO_CHAR(DATE_CONNECTION),1,6)) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from "+connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ,"+loginTable.SqlWithPrefix+","+contactTable.SqlWithPrefix
				+","+addressTable.SqlWithPrefix+","+companyTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
							
				//Gourp by
				sql.Append(" group by "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,"+connectionByLoginTable.Prefix+".id_login,login,date_connection,connection_number");

				sql.Append(" ) group by date_connection,id_company,company,id_login,login ");
                //Order by
                sql.Append(" order by  date_connection, login, id_login ");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" TopConnectedByMonth : Impossible to get top connected client by month list. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region Top connections par mois et par type de client	

		/// <summary>
		/// Top connections par type de clients et par mois 
		/// </summary>
		/// <returns>Top connections clients par mois </returns>
        public virtual DataTable TopTypeConnectedByMonth() {
            var sql = new StringBuilder(3000);
			try{
				#region Requête

				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				Table groupContactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContactGroup);

				//select	
				sql.Append(" select id_group_contact,group_contact,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+contactTable.Prefix+".id_group_contact,group_contact");
				sql.Append(",TO_NUMBER(SUBSTR(TO_CHAR(DATE_CONNECTION),1,6)) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from "+connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ,"+loginTable.SqlWithPrefix+","+contactTable.SqlWithPrefix
					+","+groupContactTable.SqlWithPrefix);
					
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_group_contact(+)="+groupContactTable.Prefix+".id_group_contact ");
				sql.Append(" and "+groupContactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
							
				//Gourp by
				sql.Append(" group by "+contactTable.Prefix+".id_group_contact,group_contact,date_connection,connection_number");

				sql.Append(" ) group by date_connection,id_group_contact,group_contact ");
                //Order by
                sql.Append(" order by  date_connection, group_contact, id_group_contact ");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" TopTypeConnectedByMonth : Impossible d'obtenir la liste des Top connections type clients par mois. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region Top connections par jour nommé	

		/// <summary>
		/// Top connections clients par jour nommé	
		/// </summary>
		/// <returns>Top connections clients par jour nommé	 </returns>
        public virtual DataTable TopConnectedByDay() {
            var sql = new StringBuilder(3000);
			try{
				#region Requête

				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				
				//select	
				sql.Append(" select id_company,company,id_login ,login,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,"+connectionByLoginTable.Prefix+".id_login ,"+loginTable.Prefix+".login");
				sql.Append(",TO_NUMBER(TO_CHAR(TO_DATE(DATE_CONNECTION,'YYYY-MM-DD'),'D')) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				//From
				sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ," + loginTable.SqlWithPrefix + "," + contactTable.SqlWithPrefix
				+ "," + addressTable.SqlWithPrefix + "," + companyTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
							
				//Gourp by
				sql.Append(" group by "+companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,"+connectionByLoginTable.Prefix+".id_login,login,date_connection,connection_number");

				sql.Append(" ) group by date_connection,id_company,company,id_login,login ");
                //Order by
                sql.Append(" order by  date_connection, login, id_login");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" TopConnectedByMonth : Impossible d'obtenir la liste des Top connections clients par mois. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region Top connections par jour nommé et par type de client	

		/// <summary>
		/// Top connections par type de clients et par jour nommé 
		/// </summary>
		/// <returns>Top connections type de clients et par jour nommé </returns>
        public virtual DataTable TopTypeConnectedByDay() {
            var sql = new StringBuilder(3000);
			try{
				#region Requête

				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLogin);
				Table groupContactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContactGroup);

				//select	
				sql.Append(" select id_group_contact,group_contact,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+contactTable.Prefix+".id_group_contact,group_contact");
				sql.Append(",TO_NUMBER(TO_CHAR(TO_DATE(DATE_CONNECTION,'YYYY-MM-DD'),'D')) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				//From
				sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
				sql.Append(" ," + loginTable.SqlWithPrefix + "," + contactTable.SqlWithPrefix
				+ "," + groupContactTable.SqlWithPrefix );
				
				//Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+connectionByLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+contactTable.Prefix+".id_group_contact(+)="+groupContactTable.Prefix+".id_group_contact ");
				sql.Append(" and "+groupContactTable.Prefix+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
							
				//Gourp by
				sql.Append(" group by "+contactTable.Prefix+".id_group_contact,group_contact,date_connection,connection_number");

				sql.Append(" ) group by date_connection,id_group_contact,group_contact ");
                //Order by
                sql.Append(" order by  date_connection, group_contact, id_group_contact ");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" TopTypeConnectedByDay : Impossible to get the list of Top connected clients type  named day. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region IP par client	

		/// <summary>
		/// IP par client
		/// </summary>
		/// <returns>Données IP par client</returns>
        public virtual DataTable IPAddress() {
            var sql = new StringBuilder(3000);
			try{
				#region Requête
				
				Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
				Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
				Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
				Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				Table ipLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingLoginIp);
				
				//select
				sql.Append(" select ");				
				sql.Append(companyTable.Prefix+".id_company ,"+companyTable.Prefix+".company,"+ipLoginTable.Prefix+".id_login,"+loginTable.Prefix+".login,IP_ADDRESS ");
				//From
				sql.Append(" from " + ipLoginTable.SqlWithPrefix);
				sql.Append(" ,"+loginTable.SqlWithPrefix+","+contactTable.SqlWithPrefix
					+","+addressTable.SqlWithPrefix+","+companyTable.SqlWithPrefix);
				//Where
                sql.Append(" where " + ipLoginTable.Prefix + ".date_connection  between " + _parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + _parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (_parameters.Logins.Length > 0)
                    sql.Append(" and " + ipLoginTable.Prefix + ".id_login in (" + _parameters.Logins + ") ");
				sql.Append(" and "+loginTable.Prefix+".id_login="+ipLoginTable.Prefix+".id_login ");
				sql.Append(" and "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");
				sql.Append(" and "+contactTable.Prefix+".id_address = "+addressTable.Prefix+".id_address ");
				sql.Append(" and "+addressTable.Prefix+".id_company="+companyTable.Prefix+".id_company ");
				//Gourp by
				sql.Append(" group by  "+companyTable.Prefix+".id_company,"+companyTable.Prefix+".company,"+ipLoginTable.Prefix+".id_login,"+loginTable.Prefix+".login,IP_ADDRESS");
				//Order by
				sql.Append(" order by  "+companyTable.Prefix+".company,"+loginTable.Prefix+".login ");
				#endregion
				
				#region Execution

                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(Exception err){
                throw (new Exceptions.BastetDataAccessException(" IPAddress : Impossible to get clients IP list. sql:" + sql, err));
			}
			
	
		}
		#endregion

		#region Nom des clients		

		/// <summary>
		/// Noms clients
		/// </summary>
		/// <returns>nom clients</returns>
        public virtual DataTable Name(string idlogins) {

			#region Requête
			var sql = new StringBuilder(3000);
			Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
			Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
				
			//select
			sql.Append(" select "+loginTable.Prefix+".id_login,"+loginTable.Prefix+".login,"+contactTable.Prefix+".FIRST_NAME ,"+contactTable.Prefix+".NAME ");			
			//From
			sql.Append(" from ");
			sql.Append(" "+loginTable.SqlWithPrefix+","+contactTable.SqlWithPrefix);
			//Where
			sql.Append(" where ");
			if(idlogins.Length>0){
				sql.Append("  "+loginTable.Prefix+".id_login in ("+idlogins+") ");
				sql.Append("  and ");
			}
			sql.Append("  "+loginTable.Prefix+".id_contact="+contactTable.Prefix+".id_contact ");			
			//Gourp by
			sql.Append(" group by  "+loginTable.Prefix+".id_login,"+loginTable.Prefix+".login,"+contactTable.Prefix+".FIRST_NAME,"+contactTable.Prefix+".NAME");
			

			#endregion
				
			#region Execution
			try{
                return (_parameters.Source.Fill(sql.ToString()).Tables[0]);
			}
			catch(Exception err){
                throw (new Exception(" TopConnected : Impossible to get names of most connected clients. sql:" + sql, err));
			}
			#endregion
	
		}
		#endregion

        #region Top connections Clients, IP, Tranches horaires
        /// <summary>
        /// Top connections Clients, IP, time slot
        /// </summary>
        /// <param name="parameters">parametres</param>
        /// <returns>Données Top connections Clients, IP, time slot</returns>
        public static DataTable TopConnectedByIpTimeSlot(BastetCommon.Parameters parameters)
        {
            try
            {
                #region Requête
                StringBuilder sql = new StringBuilder(3000);
                Table companyTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightCompany);
                Table contactTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightContact);
                Table addressTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightAddress);
                Table loginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.rightLogin);
                Table connectionByLoginTable = WebApplicationParameters.DataBaseDescription.GetTable(TableIds.trackingConnectionByLoginIpTimeslot);

                //select				
                sql.Append(" select ");
                sql.Append(" " + companyTable.Prefix + ".id_company ," + companyTable.Prefix + ".company," + connectionByLoginTable.Prefix + ".id_login," + loginTable.Prefix + ".login ");
                sql.Append(" ,IP_ADDRESS," + connectionByLoginTable.Prefix + ".date_connection ,sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_24_3) as CONNECTION_NUMBER_24_3 ");
                sql.Append(",sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_3_6) as CONNECTION_NUMBER_3_6,sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_6_9) as CONNECTION_NUMBER_6_9 ");
                sql.Append(",sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_9_12) as CONNECTION_NUMBER_9_12,sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_12_15) as CONNECTION_NUMBER_12_15");
                sql.Append(",sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_15_18) as CONNECTION_NUMBER_15_18,sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_18_21) as CONNECTION_NUMBER_18_21");
                sql.Append(",sum(" + connectionByLoginTable.Prefix + ".CONNECTION_NUMBER_21_24) as CONNECTION_NUMBER_21_24 ");

                //From
                sql.Append(" from " + connectionByLoginTable.SqlWithPrefix);
                sql.Append(" ," + companyTable.SqlWithPrefix + "," + contactTable.SqlWithPrefix
                    + "," + addressTable.SqlWithPrefix + "," + loginTable.SqlWithPrefix);
                //Where
                sql.Append(" where " + connectionByLoginTable.Prefix + ".date_connection  between " + parameters.PeriodBeginningDate.ToString("yyyyMMdd") + " and " + parameters.PeriodEndDate.ToString("yyyyMMdd"));
                if (parameters != null && parameters.Logins.Length > 0)
                    sql.Append(" and " + connectionByLoginTable.Prefix + ".id_login in (" + parameters.Logins + ") ");
                sql.Append(" and " + loginTable.Prefix + ".id_login=" + connectionByLoginTable.Prefix + ".id_login ");
                sql.Append(" and " + loginTable.Prefix + ".id_contact=" + contactTable.Prefix + ".id_contact ");
                sql.Append(" and " + contactTable.Prefix + ".id_address = " + addressTable.Prefix + ".id_address ");
                sql.Append(" and " + addressTable.Prefix + ".id_company=" + companyTable.Prefix + ".id_company ");
                //Gourp by
                sql.Append(" group by  " + companyTable.Prefix + ".id_company," + companyTable.Prefix + ".company," + connectionByLoginTable.Prefix + ".id_login," + loginTable.Prefix + ".login , IP_ADDRESS, "+ connectionByLoginTable.Prefix + ".date_connection  ");
                //Order by
                sql.Append(" order by  " + companyTable.Prefix + ".company  asc," + loginTable.Prefix + ".login asc,IP_ADDRESS, " + connectionByLoginTable.Prefix + ".date_connection ");
                #endregion

                #region Execution

                return (parameters.Source.Fill(sql.ToString()).Tables[0]);
                #endregion
            }
            catch (System.Exception err)
            {
                throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnectedByIpTimeSlot : Impossible to get the list of most connected Clients, IP, time slot ", err));
            }


        }
        #endregion



    }//end BastetDataAccess

}//end namespace DataAccess
