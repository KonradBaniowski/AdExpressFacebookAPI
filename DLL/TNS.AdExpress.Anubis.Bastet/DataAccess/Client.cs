#region Informations
///////////////////////////////////////////////////////////
//  Client.cs
//  Implementation of the Class BastetDataAccess
//  Generated by Enterprise Architect
//  Created on:      17-nov.-2005 16:51:11
//  Original author: D.V. Mussuma
///////////////////////////////////////////////////////////
#endregion

using System;
using System.Data;
using System.Text;

using BastetCommon=TNS.AdExpress.Bastet.Common;
using DBSchema=TNS.AdExpress.Constantes.DB.Schema;
using DBTables=TNS.AdExpress.Constantes.DB.Tables;
using AnubisBastet=TNS.AdExpress.Anubis.Bastet;
using DBConstantes=TNS.AdExpress.Constantes.DB;

namespace TNS.AdExpress.Anubis.Bastet.DataAccess {
	/// <summary>
	/// Obtient les données pour la génération du fichier excel
	/// </summary>
	public class Client {
				
				
		#region Top des clients qui se connectent		

		/// <summary>
		/// Top  des clients qui se connectent le plus
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Données Top  des clients qui se connectent le plus</returns>
		public static DataTable  TopConnected(BastetCommon.Parameters parameters){
			try{
				#region Requête
				StringBuilder sql = new StringBuilder(3000);
				//select
				sql.Append(" select sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER) as CONNECTION_NUMBER,sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_8_12) as CONNECTION_NUMBER_8_12");
				sql.Append(",sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_12_16) as CONNECTION_NUMBER_12_16,sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_16_20) as CONNECTION_NUMBER_16_20");
				sql.Append(",sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_20_24) as CONNECTION_NUMBER_20_24,sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_24_8) as CONNECTION_NUMBER_24_8");
				sql.Append(","+DBTables.COMPANY_PREFIXE+".id_company ,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login,"+DBTables.LOGIN_PREFIXE+".login ");
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".CONNECTION_BY_LOGIN "+DBTables.CONNECTION_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
					+","+DBSchema.LOGIN_SCHEMA+".ADDRESS "+DBTables.ADDRESS_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".COMPANY "+DBTables.COMPANY_PREFIXE);
				//Where
				sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				//			sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between 20051118 and 20051118 ");//test
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_address = "+DBTables.ADDRESS_PREFIXE+".id_address ");
				sql.Append(" and "+DBTables.ADDRESS_PREFIXE+".id_company="+DBTables.COMPANY_PREFIXE+".id_company ");
				//Gourp by
				sql.Append(" group by  "+DBTables.COMPANY_PREFIXE+".id_company,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login,"+DBTables.LOGIN_PREFIXE+".login ");
				//Order by
				sql.Append(" order by  CONNECTION_NUMBER  desc,"+DBTables.LOGIN_PREFIXE+".login ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnected : Impossible d'obtenir la liste des clients les plus connectés ", err));
			}
			
	
		}
		#endregion

		#region Top connections par type de client	

		/// <summary>
		/// Top  des connections par type de client 
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Données Top  connections par type de client </returns>
		public static DataTable  TopTypeConnected(BastetCommon.Parameters parameters){
			try{
				#region Requête
				StringBuilder sql = new StringBuilder(3000);
				//select
				sql.Append(" select sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER) as CONNECTION_NUMBER,sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_8_12) as CONNECTION_NUMBER_8_12");
				sql.Append(",sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_12_16) as CONNECTION_NUMBER_12_16,sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_16_20) as CONNECTION_NUMBER_16_20");
				sql.Append(",sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_20_24) as CONNECTION_NUMBER_20_24,sum("+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".CONNECTION_NUMBER_24_8) as CONNECTION_NUMBER_24_8");
				sql.Append(",group_contact ");
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".CONNECTION_BY_LOGIN "+DBTables.CONNECTION_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
					+","+DBSchema.LOGIN_SCHEMA+".GROUP_CONTACT "+DBTables.GROUP_CONTACT_PREFIXE);
					
				//Where
				sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_group_contact(+)="+DBTables.GROUP_CONTACT_PREFIXE+".id_group_contact ");
				sql.Append(" and "+DBTables.GROUP_CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);			
				//Gourp by
				sql.Append(" group by group_contact");
				//Order by
				sql.Append(" order by  CONNECTION_NUMBER  desc,group_contact");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnected : Impossible d'obtenir la liste des sociétés les plus connectés ", err));
			}
			
	
		}
		#endregion

		#region Top connections par mois	

		/// <summary>
		/// Top connections clients par mois
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Top connections clients par mois </returns>
		public static DataTable  TopConnectedByMonth(BastetCommon.Parameters parameters){
			try{
				#region Requête

				StringBuilder sql = new StringBuilder(3000);

				//select	
				sql.Append(" select id_company,company,id_login ,login,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+DBTables.COMPANY_PREFIXE+".id_company ,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ,"+DBTables.LOGIN_PREFIXE+".login");
				sql.Append(",TO_NUMBER(SUBSTR(TO_CHAR(DATE_CONNECTION),1,6)) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".CONNECTION_BY_LOGIN "+DBTables.CONNECTION_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
				+","+DBSchema.LOGIN_SCHEMA+".ADDRESS "+DBTables.ADDRESS_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".COMPANY "+DBTables.COMPANY_PREFIXE);
				//Where
				sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_address = "+DBTables.ADDRESS_PREFIXE+".id_address ");
				sql.Append(" and "+DBTables.ADDRESS_PREFIXE+".id_company="+DBTables.COMPANY_PREFIXE+".id_company ");
							
				//Gourp by
				sql.Append(" group by "+DBTables.COMPANY_PREFIXE+".id_company ,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login,login,date_connection,connection_number");
				//Order by
				sql.Append(" order by  "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login,login,date_connection");

				sql.Append(" ) group by date_connection,id_company,company,id_login,login ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnectedByMonth : Impossible d'obtenir la liste des Top connections clients par mois ", err));
			}
			
	
		}
		#endregion

		#region Top connections par mois et par type de client	

		/// <summary>
		/// Top connections par type de clients et par mois 
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Top connections clients par mois </returns>
		public static DataTable  TopTypeConnectedByMonth(BastetCommon.Parameters parameters){
			try{
				#region Requête

				StringBuilder sql = new StringBuilder(3000);

				//select	
				sql.Append(" select id_group_contact,group_contact,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+DBTables.CONTACT_PREFIXE+".id_group_contact,group_contact");
				sql.Append(",TO_NUMBER(SUBSTR(TO_CHAR(DATE_CONNECTION),1,6)) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".CONNECTION_BY_LOGIN "+DBTables.CONNECTION_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
					+","+DBSchema.LOGIN_SCHEMA+".GROUP_CONTACT "+DBTables.GROUP_CONTACT_PREFIXE);
					
				//Where
				sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_group_contact(+)="+DBTables.GROUP_CONTACT_PREFIXE+".id_group_contact ");
				sql.Append(" and "+DBTables.GROUP_CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
							
				//Gourp by
				sql.Append(" group by "+DBTables.CONTACT_PREFIXE+".id_group_contact,group_contact,date_connection,connection_number");
				//Order by
				sql.Append(" order by  "+DBTables.CONTACT_PREFIXE+".id_group_contact,group_contact,date_connection");

				sql.Append(" ) group by date_connection,id_group_contact,group_contact ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopTypeConnectedByMonth : Impossible d'obtenir la liste des Top connections type clients par mois ", err));
			}
			
	
		}
		#endregion

		#region Top connections par jour nommé	

		/// <summary>
		/// Top connections clients par jour nommé	
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Top connections clients par jour nommé	 </returns>
		public static DataTable  TopConnectedByDay(BastetCommon.Parameters parameters){
			try{
				#region Requête

				StringBuilder sql = new StringBuilder(3000);

				//select	
				sql.Append(" select id_company,company,id_login ,login,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+DBTables.COMPANY_PREFIXE+".id_company ,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ,"+DBTables.LOGIN_PREFIXE+".login");
				sql.Append(",TO_NUMBER(TO_CHAR(TO_DATE(DATE_CONNECTION,'YYYY-MM-DD'),'D')) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".CONNECTION_BY_LOGIN "+DBTables.CONNECTION_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
					+","+DBSchema.LOGIN_SCHEMA+".ADDRESS "+DBTables.ADDRESS_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".COMPANY "+DBTables.COMPANY_PREFIXE);
				//Where
				sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_address = "+DBTables.ADDRESS_PREFIXE+".id_address ");
				sql.Append(" and "+DBTables.ADDRESS_PREFIXE+".id_company="+DBTables.COMPANY_PREFIXE+".id_company ");
							
				//Gourp by
				sql.Append(" group by "+DBTables.COMPANY_PREFIXE+".id_company ,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login,login,date_connection,connection_number");
				//Order by
				sql.Append(" order by  "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login,login,date_connection");

				sql.Append(" ) group by date_connection,id_company,company,id_login,login ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopConnectedByMonth : Impossible d'obtenir la liste des Top connections clients par mois ", err));
			}
			
	
		}
		#endregion

		#region Top connections par jour nommé et par type de client	

		/// <summary>
		/// Top connections par type de clients et par jour nommé 
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Top connections type de clients et par jour nommé </returns>
		public static DataTable  TopTypeConnectedByDay(BastetCommon.Parameters parameters){
			try{
				#region Requête

				StringBuilder sql = new StringBuilder(3000);

				//select	
				sql.Append(" select id_group_contact,group_contact,DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER from ( ");

				sql.Append(" select "+DBTables.CONTACT_PREFIXE+".id_group_contact,group_contact");
				sql.Append(",TO_NUMBER(TO_CHAR(TO_DATE(DATE_CONNECTION,'YYYY-MM-DD'),'D')) AS DATE_CONNECTION,sum(CONNECTION_NUMBER) as CONNECTION_NUMBER");
				
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".CONNECTION_BY_LOGIN "+DBTables.CONNECTION_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
					+","+DBSchema.LOGIN_SCHEMA+".GROUP_CONTACT "+DBTables.GROUP_CONTACT_PREFIXE);
					
				//Where
				sql.Append(" where "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.CONNECTION_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_group_contact(+)="+DBTables.GROUP_CONTACT_PREFIXE+".id_group_contact ");
				sql.Append(" and "+DBTables.GROUP_CONTACT_PREFIXE+".activation<"+DBConstantes.ActivationValues.UNACTIVATED);
							
				//Gourp by
				sql.Append(" group by "+DBTables.CONTACT_PREFIXE+".id_group_contact,group_contact,date_connection,connection_number");
				//Order by
				sql.Append(" order by  "+DBTables.CONTACT_PREFIXE+".id_group_contact,group_contact,date_connection");

				sql.Append(" ) group by date_connection,id_group_contact,group_contact ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" TopTypeConnectedByDay : Impossible d'obtenir la liste des Top connections type clients par jour nommé. ", err));
			}
			
	
		}
		#endregion

		#region IP par client	

		/// <summary>
		/// IP par client
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>Données IP par client</returns>
		public static DataTable  IPAddress(BastetCommon.Parameters parameters){
			try{
				#region Requête
				StringBuilder sql = new StringBuilder(3000);
				//select
				sql.Append(" select ");				
				sql.Append(DBTables.COMPANY_PREFIXE+".id_company ,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.IP_BY_LOGIN_PREFIXE+".id_login,"+DBTables.LOGIN_PREFIXE+".login,IP_ADDRESS ");
				//From
				sql.Append(" from "+DBSchema.UNIVERS_SCHEMA+".IP_BY_LOGIN "+DBTables.IP_BY_LOGIN_PREFIXE);
				sql.Append(" ,"+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE
					+","+DBSchema.LOGIN_SCHEMA+".ADDRESS "+DBTables.ADDRESS_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".COMPANY "+DBTables.COMPANY_PREFIXE);
				//Where
				sql.Append(" where "+DBTables.IP_BY_LOGIN_PREFIXE+".date_connection  between "+parameters.PeriodBeginningDate+" and "+parameters.PeriodEndDate);
				if(parameters!=null && parameters.Logins.Length>0)
					sql.Append(" and "+DBTables.IP_BY_LOGIN_PREFIXE+".id_login in ("+parameters.Logins+") ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_login="+DBTables.IP_BY_LOGIN_PREFIXE+".id_login ");
				sql.Append(" and "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");
				sql.Append(" and "+DBTables.CONTACT_PREFIXE+".id_address = "+DBTables.ADDRESS_PREFIXE+".id_address ");
				sql.Append(" and "+DBTables.ADDRESS_PREFIXE+".id_company="+DBTables.COMPANY_PREFIXE+".id_company ");
				//Gourp by
				sql.Append(" group by  "+DBTables.COMPANY_PREFIXE+".id_company,"+DBTables.COMPANY_PREFIXE+".company,"+DBTables.IP_BY_LOGIN_PREFIXE+".id_login,"+DBTables.LOGIN_PREFIXE+".login,IP_ADDRESS");
				//Order by
				sql.Append(" order by  "+DBTables.COMPANY_PREFIXE+".company,"+DBTables.LOGIN_PREFIXE+".login ");
				#endregion
				
				#region Execution
		
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
				#endregion
			}
			catch(System.Exception err){
				throw (new AnubisBastet.Exceptions.BastetDataAccessException(" IPAddress : Impossible d'obtenir la liste IP par clients. ", err));
			}
			
	
		}
		#endregion

		#region Nom des clients		

		/// <summary>
		/// Noms clients
		/// </summary>
		/// <param name="parameters">parametres</param>
		/// <returns>nom clients</returns>
		public static DataTable  Name(BastetCommon.Parameters parameters,string idlogins){

			#region Requête
			StringBuilder sql = new StringBuilder(3000);
			//select
			sql.Append(" select "+DBTables.LOGIN_PREFIXE+".id_login,"+DBTables.LOGIN_PREFIXE+".login,"+DBTables.CONTACT_PREFIXE+".FIRST_NAME ,"+DBTables.CONTACT_PREFIXE+".NAME ");			
			//From
			sql.Append(" from ");
			sql.Append(" "+DBSchema.LOGIN_SCHEMA+".LOGIN "+DBTables.LOGIN_PREFIXE+","+DBSchema.LOGIN_SCHEMA+".CONTACT "+DBTables.CONTACT_PREFIXE);
			//Where
			sql.Append(" where ");
			if(idlogins.Length>0){
				sql.Append("  "+DBTables.LOGIN_PREFIXE+".id_login in ("+idlogins+") ");
				sql.Append("  and ");
			}
			sql.Append("  "+DBTables.LOGIN_PREFIXE+".id_contact="+DBTables.CONTACT_PREFIXE+".id_contact ");			
			//Gourp by
			sql.Append(" group by  "+DBTables.LOGIN_PREFIXE+".id_login,"+DBTables.LOGIN_PREFIXE+".login,"+DBTables.CONTACT_PREFIXE+".FIRST_NAME,"+DBTables.CONTACT_PREFIXE+".NAME");
			
			#endregion
				
			#region Execution
			try{
				return(parameters.Source.Fill(sql.ToString()).Tables[0]);
			}
			catch(System.Exception err){
				//throw (new  AnubisBastet.Exceptions.BastetDataAccessExceptions(" TopConnectedCustomer : Impossible d'obtenir la liste des clients les plus connectés "+label, err));
				throw (new Exception(" TopConnected : Impossible d'obtenir le nom des clients les plus connectés "+ err));
			}
			#endregion
	
		}
		#endregion

		

	}//end BastetDataAccess

}//end namespace DataAccess