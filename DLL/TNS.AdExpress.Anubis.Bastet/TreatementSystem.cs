#region Informations
///////////////////////////////////////////////////////////
//  TreatementSystem.cs
//  Implementation of the Class TreatementSystem
//  Generated by Enterprise Architect
//  Created on:      17-nov.-2005 16:51:12
//  Original author: D. V. Mussuma
///////////////////////////////////////////////////////////

#endregion


using System;
using System.IO;
using System.Data;
using System.Threading;

using TNS.AdExpress.Anubis.Bastet.Common;
using TNS.AdExpress.Anubis.Bastet.BusinessFacade;
using TNS.FrameWork.DB.Common;
using TNS.AdExpress.Bastet.Common;

using Aspose.Cells;
using TNS.Ares;
using CstWeb = TNS.AdExpress.Constantes.Web;
using TNS.Ares.StaticNavSession.DAL;
using TNS.AdExpress.Domain.Layers;
using System.Reflection;
using TNS.AdExpress.Domain.Web;

namespace TNS.AdExpress.Anubis.Bastet {
	/// <summary>
	/// Implementation de TNS.AdExpress.Anubis.BusinessFacade.IPlugin pour Bastet plug-
	/// in
	/// </summary>
	public class TreatementSystem :IPlugin{
		
		#region Evènements
		/// <summary>
		/// Lancement du module
		/// </summary>
		public event StartWork OnStartWork;
		/// <summary>
		/// Arrêt du module
		/// </summary>
		public event StopWorkerJob OnStopWorkerJob;
		/// <summary>
		/// Message d'une alerte
		/// </summary>
		public event MessageAlert OnMessageAlert;
		/// <summary>
		/// Message d'une alerte
		/// </summary>
		public event Error OnError;
		/// <summary>
		/// Envoie des rapports
		/// </summary>
		public event SendReport OnSendReport;
		#endregion
		
		#region Variables
		/// <summary>
		/// Thread qui traite l'alerte
		/// </summary>
		private System.Threading.Thread _myThread;
		/// <summary>
		/// Identifiant du résultat à traiter
		/// </summary>
		private Int64 _navSessionId;
		/// <summary>
		/// Source de données pour charger la session du résultat
		/// </summary>
		private IDataSource _dataSource;
		/// <summary>
		/// Configuration du plug-in
		/// </summary>
		private BastetConfig _bastetConfig;
		/// <summary>
		/// Composant excel
		/// </summary>
		private BastetExcelSystem _excel;
        /// <summary>
        /// Data Access Layer
        /// </summary>
        private IStaticNavSessionDAL _dataAccess;
		#endregion
				
		#region Constructeur
		/// <summary>
		/// Constructeur
		/// </summary>
		public TreatementSystem(){

		}
		#endregion

		#region Destructeur
		/// <summary>
		/// Destructeur
		/// </summary>
		~TreatementSystem(){


		}
		#endregion
		
		#region Dispose
		/// <summary>
		/// Nettoyage
		/// </summary>
		public virtual void Dispose(){

		}		
		#endregion

		#region Nom du Plug-in
		/// <summary>
		/// Obtient le nom du plug-in
		/// </summary>
		/// <returns>Le nom du plug-in</returns>
		public string GetPluginName(){
			return " Bastet Excel Generator"; // Constante
		}
		#endregion
		
		#region Démarrage et Arrêt de l'éxécution du thread
		/// <summary>
		///  Lance le traitement du résultat
		/// </summary>
		/// <param name="navSessionId"></param>
		/// <param name="confifurationFilePath"></param>
		/// <param name="dataSource">source de données</param>
		public void Treatement(string confifurationFilePath,IDataSource dataSource,Int64 navSessionId){
			_navSessionId=navSessionId;

            object[] parameter = new object[1];
            parameter[0] = dataSource;
            CoreLayer cl = WebApplicationParameters.CoreLayers[CstWeb.Layers.Id.dataAccess];
            _dataAccess = (IStaticNavSessionDAL)AppDomain.CurrentDomain.CreateInstanceFromAndUnwrap(AppDomain.CurrentDomain.BaseDirectory + cl.AssemblyName, cl.Class, false, BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public, null, parameter, null, null, null);
	
			#region Chargement du fichier de configuration
			if(confifurationFilePath==null){
				OnError(_navSessionId,"Impossible to launch job treatment", new ArgumentNullException("Configuration file name is null."));
				return;
			}
			if(confifurationFilePath.Length==0){
				OnError(_navSessionId, "Impossible to launch job treatment", new ArgumentException("Configuration file name is null."));
				return;
			}
			try{
				_bastetConfig=new BastetConfig(new XmlReaderDataSource(confifurationFilePath));
			}
			catch(System.Exception err){
                OnError(_navSessionId,"Impossible to launch job treatment <== impossible to load configuration file: Path="+confifurationFilePath,err);
				return;
			}
			#endregion

			_dataSource=dataSource;
			
			ThreadStart myThreadStart = new ThreadStart(ComputeTreatement);
			_myThread=new Thread(myThreadStart);
			_myThread.Name=" Bastet Excel Generator ";
			_myThread.Start();
		
		}

		/// <summary>
		/// Arrête le traitement du résultat
		/// </summary>
		public void AbortTreatement(){
			_myThread.Abort();
		}
		#endregion

		#region Traitment du résultat
		/// <summary>
		/// Genere  et envoie par mail le fichier excel pour le plug-in Bastet
		/// </summary>
		private void ComputeTreatement(){
			
			try{
				OnStartWork(_navSessionId,this.GetPluginName()+" started for "+_navSessionId);

				#region Request Details
                DataRow rqDetails = _dataAccess.GetRow(_navSessionId);
				#endregion

				#region Excel management
				
				_excel = new BastetExcelSystem(_dataSource,_bastetConfig,rqDetails,(Parameters)Parameters.Load(_navSessionId));
				string fileName = _excel.Init();
				_excel.Fill();
                _dataAccess.RegisterFile(_navSessionId, fileName);
				_excel.Send();
                _dataAccess.UpdateStatus(_navSessionId, TNS.Ares.Constantes.Constantes.Result.status.sent.GetHashCode());
                _dataAccess.DeleteRow(_navSessionId);			
				
				#endregion

				OnStopWorkerJob(_navSessionId,"","",this.GetPluginName()+" finished for "+_navSessionId);
			}
			catch(System.Exception err){
                _dataAccess.UpdateStatus(_navSessionId, TNS.Ares.Constantes.Constantes.Result.status.error.GetHashCode());
				OnError(_navSessionId,"Error during result execution.", err);
				return;
			}
			finally{
				try{
					if (File.Exists(_excel.ExcelFilePath)) {
						File.Delete(_excel.ExcelFilePath);
					}
				}
				catch(System.Exception){					
				}
			}


		}
		#endregion

	}//end TreatementSystem

}//end namespace TNS.AdExpress.Anubis.Bastet