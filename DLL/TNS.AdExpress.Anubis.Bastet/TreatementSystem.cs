#region Informations
///////////////////////////////////////////////////////////
//  TreatementSystem.cs
//  Implementation of the Class TreatementSystem
//  Generated by Enterprise Architect
//  Created on:      17-nov.-2005 16:51:12
//  Original author: D. V. Mussuma
///////////////////////////////////////////////////////////

#endregion


using System;
using System.Collections;
using System.IO;
using System.Data;
using System.Threading;

using TNS.AdExpress.Anubis.Bastet.Common;
using TNS.AdExpress.Anubis.Bastet.BusinessFacade;
using TNS.FrameWork.DB.Common;
using TNS.AdExpress.Bastet.Common;

using Aspose.Cells;
using TNS.Ares;
using CstWeb = TNS.AdExpress.Constantes.Web;
using TNS.Ares.StaticNavSession.DAL;

using System.Reflection;
using TNS.AdExpress.Bastet.Web;
using TNS.AdExpress.Domain.Layers;
using TNS.Ares.Domain.LS;
using TNS.AdExpress.Anubis.Bastet.Exceptions;
using TNS.AdExpress.Domain.XmlLoader;


namespace TNS.AdExpress.Anubis.Bastet {
	/// <summary>
	/// Implementation de TNS.AdExpress.Anubis.BusinessFacade.IPlugin pour Bastet plug-
	/// in
	/// </summary>
	public class TreatementSystem :IPlugin{
		
		#region Evènements
		/// <summary>
		/// Lancement du module
		/// </summary>
		public event StartWork EvtStartWork;
        /// <summary>
        /// Lancement du module
        /// </summary>
        public void OnStartWork(Int64 navSessionId, string message)
        {
            if(EvtStartWork!=null) EvtStartWork(navSessionId, message);
        }
		/// <summary>
		/// Arrêt du module
		/// </summary>
        public event StopWorkerJob EvtStopWorkerJob;
        /// <summary>
        /// Arrêt du module
        /// </summary>
        public void OnStopWorkerJob(Int64 navSessionId, string resultFilePath, string mail, string evtMessage) {
            if (EvtStopWorkerJob != null) EvtStopWorkerJob(navSessionId, resultFilePath, mail, evtMessage);
        }
		/// <summary>
		/// Message d'une alerte
		/// </summary>
        public event MessageAlert EvtMessageAlert;
        /// <summary>
        /// Message d'une alerte
        /// </summary>
        public void OnMessageAlert(Int64 navSessionId, string message)
            {
            if (EvtMessageAlert != null) EvtMessageAlert(navSessionId, message);
        }
		/// <summary>
		/// Message d'une alerte
		/// </summary>
        public event Error EvtError;
        /// <summary>
        /// Message d'une alerte
        /// </summary>
        public void OnError(Int64 navSessionId, string message, System.Exception e)
            {
            if (EvtError != null) EvtError(navSessionId, message, e);
        }
		/// <summary>
		/// Envoie des rapports
		/// </summary>
        public event SendReport EvtSendReport;
        /// <summary>
        /// Envoie des rapports
        /// </summary>
        public void OnSendReport(string reportTitle, TimeSpan duration, DateTime endExecutionDateTime, string reportCore, ArrayList mailList, ArrayList errorList, string from, string mailServer, int mailPort, Int64 navSessionId)
        {
            if (EvtSendReport != null) EvtSendReport(reportTitle, duration, endExecutionDateTime, reportCore, mailList, errorList, from, mailServer, mailPort, navSessionId);
        }

	    #endregion
		
		#region Variables
		/// <summary>
		/// Thread qui traite l'alerte
		/// </summary>
		protected System.Threading.Thread _myThread;
		/// <summary>
		/// Identifiant du résultat à traiter
		/// </summary>
        protected Int64 _navSessionId;
		/// <summary>
		/// Source de données pour charger la session du résultat
		/// </summary>
        protected IDataSource _dataSource;
        /// <summary>
        /// Source de données pour charger la nomenclature
        /// </summary>
        protected IDataSource _dataSourceClassification;
		/// <summary>
		/// Configuration du plug-in
		/// </summary>
        protected BastetConfig _bastetConfig;
		/// <summary>
		/// Composant excel
		/// </summary>
        protected BastetExcelSystem _excel;
        /// <summary>
        /// Data Access Layer
        /// </summary>
        protected IStaticNavSessionDAL _dataAccess;
		#endregion
				
		#region Constructeur
		/// <summary>
		/// Constructeur
		/// </summary>
		public TreatementSystem(){

		}
		#endregion

		#region Destructeur
		/// <summary>
		/// Destructeur
		/// </summary>
		~TreatementSystem(){


		}
		#endregion
		
		#region Dispose
		/// <summary>
		/// Nettoyage
		/// </summary>
		public virtual void Dispose(){

		}		
		#endregion

		#region Nom du Plug-in
		/// <summary>
		/// Obtient le nom du plug-in
		/// </summary>
		/// <returns>Le nom du plug-in</returns>
		public string GetPluginName(){
			return " Bastet Excel Generator"; // Constante
		}
		#endregion
		
		#region Démarrage et Arrêt de l'éxécution du thread
		/// <summary>
		///  Lance le traitement du résultat
		/// </summary>
		/// <param name="navSessionId"></param>
		/// <param name="confifurationFilePath"></param>
		/// <param name="dataSource">source de données</param>
        public virtual void Treatement(string configurationFilePath, IDataSource dataSource, Int64 navSessionId) {

            try {
                _navSessionId = navSessionId;

                #region Initialization

                #region Create Instance of _webSession
                try {
                    object[] parameter = new object[1];
                    parameter[0] = dataSource;
                    CoreLayer cl = WebApplicationParameters.CoreLayers[CstWeb.Layers.Id.dataAccess];
                    _dataAccess = (IStaticNavSessionDAL)AppDomain.CurrentDomain.CreateInstanceFromAndUnwrap(AppDomain.CurrentDomain.BaseDirectory + cl.AssemblyName, cl.Class, false, BindingFlags.CreateInstance | BindingFlags.Instance | BindingFlags.Public, null, parameter, null, null);
                }
                catch (Exception e) {
                    throw new BastetExcelException("Impossible to Create Instance Of Layer IStaticNavSessionDAL ", e);
                }
                #endregion               


                bool useDefaultConnection = false;

                try {
                    useDefaultConnection = RightOptionsXL.Load(new XmlReaderDataSource(WebApplicationParameters.CountryConfigurationDirectoryRoot + TNS.AdExpress.Constantes.Web.ConfigurationFile.RIGHT_OPTIONS_CONFIGURATION_FILENAME));
                }
                catch (Exception e) {
                    throw new BastetExcelException("Impossible to Right Option", e);
                }

                if (useDefaultConnection)
                    _dataSourceClassification = WebApplicationParameters.DataBaseDescription.GetDefaultConnection(TNS.AdExpress.Domain.DataBaseDescription.DefaultConnectionIds.adExpressRussia);
                else
                    _dataSourceClassification = dataSource;

                #region Check Path File
                if (configurationFilePath == null) {
                    throw new BastetExcelException("Impossible de lancer le traitement d'un job", new ArgumentNullException("Le nom du fichier de configuration est null."));
                }
                if (configurationFilePath.Length == 0) {
                    throw new BastetExcelException("Impossible de lancer le traitement d'un job", new ArgumentException("Le nom du fichier de configuration est vide."));
                }
                #endregion

                #region Initialize Bastet
                try {
                    _bastetConfig = new BastetConfig(new XmlReaderDataSource(configurationFilePath));
                }
                catch (System.Exception err) {
                    throw new BastetExcelException("Impossible de lancer le traitement d'un job <== impossible de charger le fichier de configuration", err);
                }
                #endregion

                #endregion

            }
            catch (Exception e) {
                _dataAccess.UpdateStatus(_navSessionId, TNS.Ares.Constantes.Constantes.Result.status.error.GetHashCode());
                OnError(_navSessionId, "Impossible to initialize process ", e);
                return;
            }

			_dataSource=dataSource;
			
			ThreadStart myThreadStart = new ThreadStart(ComputeTreatement);
			_myThread=new Thread(myThreadStart);
			_myThread.Name=" Bastet Excel Generator ";
			_myThread.Start();
		
		}

		/// <summary>
		/// Arrête le traitement du résultat
		/// </summary>
		public void AbortTreatement(){
			_myThread.Abort();
		}
		#endregion

		#region Traitment du résultat
		/// <summary>
		/// Genere  et envoie par mail le fichier excel pour le plug-in Bastet
		/// </summary>
        protected virtual void ComputeTreatement() {
			
			try{
				OnStartWork(_navSessionId,this.GetPluginName()+" started for "+_navSessionId);

				#region Request Details
                DataRow rqDetails = _dataAccess.GetRow(_navSessionId);
				#endregion

				#region Excel management

                _excel = new BastetExcelSystem(_dataSource, _dataSourceClassification, _bastetConfig, rqDetails, (Parameters)Parameters.Load(_navSessionId, _dataSource));
				string fileName = _excel.Init();
				_excel.Fill();
                _dataAccess.RegisterFile(_navSessionId, fileName);
				_excel.Send();
                _dataAccess.UpdateStatus(_navSessionId, TNS.Ares.Constantes.Constantes.Result.status.sent.GetHashCode());
                PluginInformation pluginInformation = PluginConfiguration.GetPluginInformation(PluginType.Bastet);
                if (pluginInformation != null && pluginInformation.DeleteRowSuccess)
                    _dataAccess.DeleteRow(_navSessionId);				
				#endregion

				OnStopWorkerJob(_navSessionId,"","",this.GetPluginName()+" finished for "+_navSessionId);
			}
			catch(System.Exception err){
                _dataAccess.UpdateStatus(_navSessionId, TNS.Ares.Constantes.Constantes.Result.status.error.GetHashCode());
				OnError(_navSessionId,"Error during result execution.", err);
				return;
			}
			finally{
				try{
                    if (File.Exists(_excel.ExcelFilePath))
                    {
                        File.Delete(_excel.ExcelFilePath);
                    }
				}
				catch(System.Exception){					
				}
			}


		}
		#endregion

	}//end TreatementSystem

}//end namespace TNS.AdExpress.Anubis.Bastet
