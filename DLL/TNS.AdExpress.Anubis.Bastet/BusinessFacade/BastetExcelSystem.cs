///////////////////////////////////////////////////////////
//  BastetExcelSystem.cs
//  Implementation of the Class BastetExcelSystem
//  Generated by Enterprise Architect
//  Created on:      17-nov.-2005 16:51:12
//  Original author: D. V. Mussuma
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Data;
using System.Collections;
using System.Text.RegularExpressions;

using TNS.AdExpress.Bastet.Common;

using TNS.AdExpress.Anubis.Bastet.Common;
using TNS.AdExpress.Anubis.Bastet.UI;

using TNS.FrameWork;
using TNS.FrameWork.Net.Mail;
using TNS.FrameWork.DB.Common;

using TNS.AdExpress.Web.Functions;

using TNS.AdExpress.Constantes.DB;
using TNS.AdExpress.Bastet.Translation;

namespace TNS.AdExpress.Anubis.Bastet.BusinessFacade {
	/// <summary>
	/// Génère le document excel pour les statistiques AdExpress
	/// </summary>
	public class BastetExcelSystem : BastetExcel {

		#region Variables
        /// <summary>
        /// Data Source 
        /// </summary>
		private IDataSource _dataSource = null;
        /// <summary>
        /// Data Source Classification
        /// </summary>
        private IDataSource _dataSourceClassification = null;
		/// <summary>
		///Bastet Configuration 
		/// </summary>
		protected BastetConfig _config = null;
		/// <summary>
		/// Requêtes clients
		/// </summary>
        protected DataRow _rqDetails = null;
		/// <summary>
		/// Paramètres statistiques à traiter
		/// </summary>
        protected Parameters _parameters = null;
		/// <summary>
		/// Chemin du fichier excel généré
		/// </summary>
        protected string _excelFilePath;
		#endregion

		#region Accesseurs
		/// <summary>
		/// Chemin du fichier excel généré
		/// </summary>
		public string ExcelFilePath{
			get{return _excelFilePath;}
		}
		#endregion

		#region Constructeur
		/// <summary>
		/// Constructeur
		/// </summary>
		public BastetExcelSystem(IDataSource dataSource, IDataSource dataSourceClassification, BastetConfig config, DataRow rqDetails, Parameters parameters):base(){
			this._dataSource = dataSource;
            this._dataSourceClassification = dataSourceClassification;
			this._config = config;
			this._rqDetails = rqDetails;
			this._parameters = parameters;
            _language = _parameters.SiteLanguage;
		}
		#endregion
			
		#region Destructeur
		~BastetExcelSystem(){

		}
		#endregion
		
		#region Fill
		/// <summary>
		/// Génère les statistiques AdExpress dans un fichier excel
		/// </summary>
		public void Fill(){

            for (int i = 0; i < _config.ExcelTabs.Count; i++)
            {
               TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs val = _config.ExcelTabs[i];
               switch (val)
                {
                    case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.customerSelelection :
                        //Rappel des paramètres
                        this.CustomerSelelection(_parameters, this._rqDetails["id_login"].ToString());
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.iPAdresseByClient:
                        //IP Adresse par client
                        this.IPAdresseByClient(_excelFilePath, this._parameters);
                        break;
                    case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topTypeConnectedCustomer:
                        //Top type clients qui se connectent le plus
                        this.TopTypeConnectedCustomer(_excelFilePath, this._parameters);
                        break;
                    case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topTypeConnectedCustomerByDay :
                        //Top connections par type de clients et par jour nommé
                        this.TopTypeConnectedCustomerByDay(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topTypeConnectedCustomerByMonth :
                        //Top connections par type de clients et par mois
                        this.TopTypeConnectedCustomerByMonth(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedCustomer :
                        //Top clients qui se connectent le plus
                        this.TopConnectedCustomer(_excelFilePath, this._parameters);		
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedCustomerByMonth :
                        //Top connections clients par mois
                        this.TopConnectedCustomerByMonth(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedCustomerByDay :
                        //Top connections clients par jour nommé
                        this.TopConnectedCustomerByDay(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedCompany :
                        //Top sociétés qui se connectent le plus
                        this.TopConnectedCompany(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedCompanyByMonth:
                        //Top sociétés qui se connectent le plus par mois
                        this.TopConnectedCompanyByMonth(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedCompanyByDay :
                        //Top sociétés qui se connectent le plus par jour nommé
                        this.TopConnectedCompanyByDay(_excelFilePath, this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.connexionDurationAverage:
                        //Durée moyenne des connections par clients
                        this.ConnexionDurationAverage(this._parameters);
                        break;
                   case  TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topUsedModules:
                        //Top des modules et des groupes de modules 
                        this.TopUsedModules(this._parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topVehicle :
                        //Top médias utilisés
                        this.TopVehicle(this._parameters, this._dataSourceClassification);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topVehicleByModule :
                        //Top médias utilisés par module
                        this.TopVehicleByModule(this._parameters, this._dataSourceClassification);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topFileUsing :
                        //Top utilisation du fichier GAD etAGM
                        this.TopFileUsing(_parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topExport:
                        //Top export de fichier
                        this.TopExport(_parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topUsedTab:
                        //Top des options utilisées
                        this.TopUsedTab(_parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topUsedUnits:
                        //Top des unités utilisées
                        this.TopUsedUnits(_parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topUsedPeriod:
                        //Top des période utilisées
                        this.TopUsedPeriod(_parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topUsingSavedSession:
                        //Top clients utilisant le plus les requêtes sauvegardées
                        this.TopUsingSavedSession(_parameters);
                        break;
                   case TNS.AdExpress.Anubis.Bastet.Constantes.excelTabs.topConnectedByIpTimeSlot:
                        //Top connections Clients, IP, time slot
                        this.TopConnectedByIpTimeSlot(_excelFilePath, _parameters);
                        break;
                   default: throw (new Exception("Impossible to identify the excel tab to compute : " + val.ToString()));

                }
            }

            if (_excel != null && !string.IsNullOrEmpty(_excelFilePath))
            {
				//Sauvegarde du fichier excel
                if (!Directory.Exists(Path.GetDirectoryName(_excelFilePath))) {
                    try { Directory.CreateDirectory(Path.GetDirectoryName(_excelFilePath)); }
                    catch {
                        _excelFilePath = Path.Combine(Path.GetTempPath(), Path.GetFileName(_excelFilePath));
                    }
                }
				this.Save(_excelFilePath);
			}
		}
		#endregion
		
		#region Nom du fichier excel
		/// <summary>
		/// Generate a valid file name from customer request
		/// </summary>
		/// <param name="rqDetails">Details of the customer request</param>
		/// <param name="shortName">Return value : short name of the File (the method return the complet path)</param>
		/// <returns>Complet File Name String (path + short name)</returns>
		private string GetFileName(DataRow rqDetails,ref string shortName){
			string excelFileName;

			try{

				excelFileName = this._config.ExcelPath;

                excelFileName += @"\" + rqDetails["ID_LOGIN"].ToString();

				if(!Directory.Exists(excelFileName)){
					Directory.CreateDirectory(excelFileName);
				}
				shortName = "Tracking_"+DateTime.Now.ToString("yyyyMMddHHmmss_")
					+ rqDetails["id_static_nav_session"].ToString();
//					+ "_"
//					+ Functions.GetRandomString(30,40);

				excelFileName += @"\" + shortName + ".xls";

				string checkPath = 	Regex.Replace(excelFileName, @"(\.xls)+", ".xls", RegexOptions.IgnoreCase | RegexOptions.Multiline);


				int i = 0;
				while(System.IO.File.Exists(checkPath)){
					if(i<=1){
						checkPath = Regex.Replace(excelFileName, @"(\.xls)+", "_"+(i+1)+".xls", RegexOptions.IgnoreCase | RegexOptions.Multiline);
					}
					else{
						checkPath = Regex.Replace(excelFileName, "(_"+i+@"\.xls)+", "_"+(i+1)+".xls", RegexOptions.IgnoreCase | RegexOptions.Multiline);
					}
					i++;
				}
				return checkPath;
			}
			catch(System.Exception e){
				throw(new Exception("Unable to generate file name for request " + _rqDetails["id_static_nav_session"].ToString() +".",e));

			}
		}
		#endregion	
		
		#region Init
		/// <summary>
		/// Initialisation des paramètres du fichier
		/// </summary>
		public string Init(){
			try{
				string shortFName = "";
                string fName = GetFileName(_rqDetails, ref shortFName);
                _excelFilePath = fName; //AppDomain.CurrentDomain.BaseDirectory +
		
				return shortFName;
				
			}
			catch(System.Exception e){
				throw(e);
			}
		}
		#endregion
		
		#region Send
		/// <summary>
		/// Envoie le mail à l'utilisateur avec le fichier excel attaché
		/// </summary>
		/// <param name="fileName"></param>
        public virtual void Send() {
			ArrayList to = new ArrayList();
			string messageBody=GestionWeb.GetWebWord(1834,_language);
			if(_excel==null){
                messageBody = GestionWeb.GetWebWord(1835, _language);
			}
			foreach(string s in _parameters.EmailsRecipient){
				to.Add(s);
			}
//			to.Add("dede.mussuma@tnsmi.fr");//test
			SmtpUtilities mail = new SmtpUtilities(_config.CustomerMailFrom, to,
            Text.SuppressAccent(GestionWeb.GetWebWord(1798, _language)),

                GestionWeb.GetWebWord(1834, _language),
				true, _config.CustomerMailServer, _config.CustomerMailPort);
			
			mail.mailKoHandler += new TNS.FrameWork.Net.Mail.SmtpUtilities.mailKoEventHandler(mail_mailKoHandler);
			mail.Attach(_excelFilePath,SmtpUtilities.AttachmentType.ATTACH_EXCEL);// Attache le fichier excel
			mail.SendWithoutThread(false);
		}
		#endregion

		#region Evenement Envoi mail client
		/// <summary>
		/// Rise exception when the customer mail has not been sent
		/// </summary>
		/// <param name="source">Error source></param>
		/// <param name="message">Error message</param>
		protected void mail_mailKoHandler(object source, string message) {
			throw new Exceptions.BastetExcelException("Echec lors de l'envoi mail client pour le fichier excelde statistiques  : " + message);
		}
		#endregion

	}//end BastetExcelSystem

}//end namespace BusinessFacade
