///////////////////////////////////////////////////////////
//  BastetExcelSystem.cs
//  Implementation of the Class BastetExcelSystem
//  Generated by Enterprise Architect
//  Created on:      17-nov.-2005 16:51:12
//  Original author: D. V. Mussuma
///////////////////////////////////////////////////////////

using System;
using System.IO;
using System.Data;
using System.Collections;
using System.Text.RegularExpressions;

using TNS.AdExpress.Bastet.Common;

using TNS.AdExpress.Anubis.Bastet.Common;
using TNS.AdExpress.Anubis.Bastet.UI;

using TNS.FrameWork;
using TNS.FrameWork.Net.Mail;
using TNS.FrameWork.DB.Common;

using TNS.AdExpress.Web.Functions;
using TNS.AdExpress.Domain.Translation;
using TNS.AdExpress.Constantes.DB;

namespace TNS.AdExpress.Anubis.Bastet.BusinessFacade {
	/// <summary>
	/// Génère le document excel pour les statistiques AdExpress
	/// </summary>
	public class BastetExcelSystem : BastetExcel {

		#region Variables
		private IDataSource _dataSource = null;
		/// <summary>
		///Bastet Configuration 
		/// </summary>
		private BastetConfig _config = null;
		/// <summary>
		/// Requêtes clients
		/// </summary>
		private DataRow _rqDetails = null;
		/// <summary>
		/// Paramètres statistiques à traiter
		/// </summary>
		private Parameters _parameters = null;
		/// <summary>
		/// Chemin du fichier excel généré
		/// </summary>
		private string _excelFilePath;
		#endregion

		#region Accesseurs
		/// <summary>
		/// Chemin du fichier excel généré
		/// </summary>
		public string ExcelFilePath{
			get{return _excelFilePath;}
		}
		#endregion

		#region Constructeur
		/// <summary>
		/// Constructeur
		/// </summary>
		public BastetExcelSystem(IDataSource dataSource, BastetConfig config, DataRow rqDetails, Parameters parameters):base(){
			this._dataSource = dataSource;
			this._config = config;
			this._rqDetails = rqDetails;
			this._parameters = parameters;
			_language = config.Language;
		}
		#endregion
			
		#region Destructeur
		~BastetExcelSystem(){

		}
		#endregion
		
		#region Fill
		/// <summary>
		/// Génère les statistiques AdExpress dans un fichier excel
		/// </summary>
		public void Fill(){


			//Rappel des paramètres
			this.CustomerSelelection(_parameters,this._rqDetails["id_login"].ToString());
			
			//IP Adresse par client
			this.IPAdresseByClient(_excelFilePath,this._parameters);
			
			//Top type clients qui se connectent le plus
			this.TopTypeConnectedCustomer(_excelFilePath,this._parameters);

			//Top connections par type de clients et par jour nommé
			this.TopTypeConnectedCustomerByDay(_excelFilePath,this._parameters);
			
			//Top connections par type de clients et par mois
			this.TopTypeConnectedCustomerByMonth(_excelFilePath,this._parameters);

			//Top clients qui se connectent le plus
			this.TopConnectedCustomer(_excelFilePath,this._parameters);				

			//Top connections clients par mois
			this.TopConnectedCustomerByMonth(_excelFilePath,this._parameters);	

			//Top connections clients par jour nommé
			this.TopConnectedCustomerByDay(_excelFilePath,this._parameters);

			//Top sociétés qui se connectent le plus
			this.TopConnectedCompany(_excelFilePath,this._parameters);

			//Top sociétés qui se connectent le plus par mois
			this.TopConnectedCompanyByMonth(_excelFilePath,this._parameters);

			//Top sociétés qui se connectent le plus par jour nommé
			this.TopConnectedCompanyByDay(_excelFilePath,this._parameters);	
	
			//Durée moyenne des connections par clients
			this.ConnexionDurationAverage(this._parameters);

			//Top des modules et des groupes de modules 
			this.TopUsedModules(this._parameters);	
		
			//Top médias utilisés
			this.TopVehicle(this._parameters);

			//Top médias utilisés par module
			this.TopVehicleByModule(this._parameters);

			//Top utilisation du fichier GAD etAGM
			this.TopFileUsing(_parameters);

			//Top export de fichier
			this.TopExport(_parameters);

			//Top des options utilisées
			this.TopUsedTab(_parameters);

			//Top des unités utilisées
			this.TopUsedUnits(_parameters);

			//Top des période utilisées
			this.TopUsedPeriod(_parameters);

			//Top clients utilisant le plus les requêtes sauvegardées
			this.TopUsingSavedSession(_parameters);

			if(this._excel!=null){
				//Sauvegarde du fichier excel
                if (!Directory.Exists(_excelFilePath))
                {
                    try { Directory.CreateDirectory(Path.GetDirectoryName(_excelFilePath)); }
                    catch {
                        _excelFilePath = Path.Combine(Path.GetTempPath(), Path.GetFileName(_excelFilePath));
                    }
                }
				this.Save(_excelFilePath);
			}
		}
		#endregion
		
		#region Nom du fichier excel
		/// <summary>
		/// Generate a valid file name from customer request
		/// </summary>
		/// <param name="rqDetails">Details of the customer request</param>
		/// <param name="shortName">Return value : short name of the File (the method return the complet path)</param>
		/// <returns>Complet File Name String (path + short name)</returns>
		private string GetFileName(DataRow rqDetails,ref string shortName){
			string excelFileName;

			try{

				excelFileName = this._config.ExcelPath;
				excelFileName += @"\" + rqDetails["ID_LOGIN"].ToString() ;

				if(!Directory.Exists(excelFileName)){
					Directory.CreateDirectory(excelFileName);
				}
				shortName = "Tracking_"+DateTime.Now.ToString("yyyyMMddHHmmss_")
					+ rqDetails["id_static_nav_session"].ToString();
//					+ "_"
//					+ Functions.GetRandomString(30,40);

				excelFileName += @"\" + shortName + ".xls";

				string checkPath = 	Regex.Replace(excelFileName, @"(\.xls)+", ".xls", RegexOptions.IgnoreCase | RegexOptions.Multiline);


				int i = 0;
				while(System.IO.File.Exists(checkPath)){
					if(i<=1){
						checkPath = Regex.Replace(excelFileName, @"(\.xls)+", "_"+(i+1)+".xls", RegexOptions.IgnoreCase | RegexOptions.Multiline);
					}
					else{
						checkPath = Regex.Replace(excelFileName, "(_"+i+@"\.xls)+", "_"+(i+1)+".xls", RegexOptions.IgnoreCase | RegexOptions.Multiline);
					}
					i++;
				}
				return checkPath;
			}
			catch(System.Exception e){
				throw(new Exception("Unable to generate file name for request " + _rqDetails["id_static_nav_session"].ToString() +".",e));

			}
		}
		#endregion	
		
		#region Init
		/// <summary>
		/// Initialisation des paramètres du fichier
		/// </summary>
		internal string Init(){
			try{
				string shortFName = "";
				string fName =  GetFileName(_rqDetails, ref shortFName);	
				_excelFilePath = AppDomain.CurrentDomain.BaseDirectory+fName;
		
				return shortFName;
				
			}
			catch(System.Exception e){
				throw(e);
			}
		}
		#endregion
		
		#region Send
		/// <summary>
		/// Envoie le mail à l'utilisateur avec le fichier excel attaché
		/// </summary>
		/// <param name="fileName"></param>
		internal void Send(){
			ArrayList to = new ArrayList();
			string messageBody=GestionWeb.GetWebWord(1834,Language.FRENCH.GetHashCode());
			if(_excel==null){
				messageBody=GestionWeb.GetWebWord(1835,Language.FRENCH.GetHashCode());
			}
			foreach(string s in _parameters.EmailsRecipient){
				to.Add(s);
			}
//			to.Add("dede.mussuma@tnsmi.fr");//test
			SmtpUtilities mail = new SmtpUtilities(_config.CustomerMailFrom, to,
			Text.SuppressAccent(GestionWeb.GetWebWord(1798,Language.FRENCH.GetHashCode())),
				
				GestionWeb.GetWebWord(1834,Language.FRENCH.GetHashCode()),
				true, _config.CustomerMailServer, _config.CustomerMailPort);
			
			mail.mailKoHandler += new TNS.FrameWork.Net.Mail.SmtpUtilities.mailKoEventHandler(mail_mailKoHandler);
			mail.Attach(_excelFilePath,SmtpUtilities.AttachmentType.ATTACH_EXCEL);// Attache le fichier excel
			mail.SendWithoutThread(false);
		}
		#endregion

		#region Evenement Envoi mail client
		/// <summary>
		/// Rise exception when the customer mail has not been sent
		/// </summary>
		/// <param name="source">Error source></param>
		/// <param name="message">Error message</param>
		private void mail_mailKoHandler(object source, string message) {
			throw new Exceptions.BastetExcelException("Echec lors de l'envoi mail client pour le fichier excelde statistiques  : " + message);
		}
		#endregion

	}//end BastetExcelSystem

}//end namespace BusinessFacade