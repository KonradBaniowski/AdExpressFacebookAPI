@model Km.AdExpressClientWeb.Models.LostWon.ResultsViewModel
@using TNS.AdExpress.Domain.Translation;
@{
    ViewBag.Title = "Results";
    var _controller = "Analysis";
    var _exportController = "ProductClassAnalysisExport";
    Layout = "~/Views/Shared/_LayoutResults.cshtml";
}

<link href="~/IgniteUI/css/structure/infragistics.css" rel="stylesheet" />
<link href="~/IgniteUI/css/themes/kantar/infragistics.theme.css" rel="stylesheet" />

<div class="row">
    @Html.Partial("Presentation", Model.Presentation)
    @Html.Partial("DetailSelection")
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 margin-top-30">
        <div class="row row-sm">
            @Html.Partial("NavigationBar", Model.NavigationBar)
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        <div class="pull-right custom-button selectexporttype">
            <select id="export-type" class="selectdatepicker hide">
                <option value="1"> @Model.Labels.ExportFormattedResult</option>
            </select>&nbsp;
            <button class="btn btn-save" id="btn-export"><i class="fa fa-file-excel-o fa-file-excel-size"></i></button>
            <button class="btn btn-save" id="btn-save-result" title="@Model.Labels.Save"><i class="glyphicon glyphicon-floppy-save fa-file-excel-size"></i></button>
            <button class="btn btn-save" id="btn-create-alert" title="@Model.Labels.CreateAlert"><i class="fa fa-clock-o fa-file-excel-size"></i></button>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-md-12">
        @Html.Action("ResultOptions", _controller)
    </div>
</div>
<div class="h20"></div>
<div class="row">
    <div class="col-md-12">
        <center>
            <p id="gridEmpty" style="display:none">@GestionWeb.GetWebWord(2106, Model.Presentation.SiteLanguage)</p>
            <div id="grid" class="hide">
            </div>
            <div id="gridLoader">
                <div class='uil-ring-css' style='transform:scale(0.54);'><div></div></div>
            </div>
        </center>
    </div>
</div>

@section Scripts {
    <script src="~/IgniteUI/js/i18n/infragistics-fr.js"></script>
    <script src="~/IgniteUI/js/infragistics.core.js"></script>
    <script src="~/IgniteUI/js/infragistics.lob.js"></script>
    <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fr.js"></script>
    @Scripts.Render("~/bundles/results")
    @Scripts.Render("~/bundles/detail-selection")
<script>
    $(document).ready(function () {
        if (typeof jQuery === "undefined") { throw new Error("jQuery") }

        $("#grid").igTreeGrid({
            primaryKey: "ClassifId",
            width: "100%",
            defaultColumnWidth: 200,
            avgRowHeight: 60,
            autoGenerateColumns: true
        });

        var ds;
        var cols;
        var colsFixed;
        var needFixedColumns = false;
        var gridWidth;
        var sortOrder = "NONE";
        var columnIndex = 1;

        function MediaDetailLevel() {
            this.LevelDetailValue = $('#mediaDetail').val();
        }

        function ProductDetailLevel() {
            this.LevelDetailValue = $('#productDetail').val();
        }

        function ResultTypeFilter() {
            this.ResultType = $('#resultType').val();
        }

        function UserFilter() {
            this.MediaDetailLevel = new MediaDetailLevel();
            this.ProductDetailLevel = new ProductDetailLevel();
            this.Evol = false;
            this.PDM = false;
            this.PDV = false;
            this.ResultTypeFilter = new ResultTypeFilter();
        }

        var userFilter = new UserFilter();

        var myCustomFunc = function (data, fields, direction) {

            if (data[0].ID == 0) {

                var elems = fields[0].fieldName.split("-");
                var index = elems[0].substring(1);

                if (sortOrder == "NONE")
                    sortOrder = "ASC";
                else if (sortOrder == "ASC")
                    sortOrder = "DESC";
                else if (sortOrder == "DESC")
                    sortOrder = "ASC";

                columnIndex = parseInt(index);

                CallAnalysisResult();
            }

            return data;
        }

        var renderGrid = function (success, error) {
            if (success) {

                $("#grid").igTreeGrid("destroy");
                $("#gridLoader").addClass("hide");
                $("#grid").removeClass("hide");
                $("#grid").igTreeGrid({
                    dataSource: ds.dataView(),
                    columns: cols,
                    height: "530px",
                    autoGenerateColumns: false,
                    primaryKey: "ID",
                    foreignKey: "PID",
                    width: "1140px",
                    autofitLastColumn: false,
                    features: [
                        {
                            name: "MultiColumnHeaders"
                        },
                        {
                            name: "Paging",
                            mode: "allLevels",
                            pageSize: 100
                        },
                        {
                            name: "ColumnFixing",
                            fixingDirection: "left",
                            columnSettings: colsFixed
                        }
                        //,{
                        //    name: "Sorting",
                        //    //type: "local",
                        //    customSortFunction: myCustomFunc,
                        //    //applySortedColumnCss: false
                        //}
                    ]
                })

                gridWidth = $("#grid_table_headers").width();
                gridWidth += $("#grid_table_headers_fixed").width();

                if (gridWidth > 1140)
                    gridWidth = 1140;

                $("#grid").igTreeGrid("option", "width", gridWidth + "px");

                $("#grid").igTreeGrid({
                    rowCollapsed: function (evt, ui) {
                        $("#grid_table_container").attr("style", "position: relative; height: 530px; width: " + gridWidth + "px;");
                    }
                });

                //$("#grid").igTreeGrid({
                //    rowCollapsed: function (evt, ui) {
                //        $("#grid_table_container").attr("style", "position: relative; height: 530px;");
                //    }
                //});

            } else {
                alert(error);
            }

        }



        function ProductDetailLevel() {
            this.LevelDetailValue = $('#productDetail').val();
        }

        function ResultTypeFilter() {
            this.ResultType = $('#resultType').val();
        }

        function UserFilter() {
            this.MediaDetailLevel = new MediaDetailLevel();
            this.ProductDetailLevel = new ProductDetailLevel();
            this.Evol = false;
            this.PDM = false;
            this.PDV = false;
            this.ResultTypeFilter = new ResultTypeFilter();
        }

        var userFilter = new UserFilter();

        var renderGrid = function (success, error) {
            if (success) {

                $("#grid").igTreeGrid("destroy");
                $("#gridLoader").addClass("hide");
                $("#grid").removeClass("hide");
                $("#grid").igTreeGrid({
                    dataSource: ds.dataView(),
                    columns: cols,
                    height: "530px",
                    autoGenerateColumns: false,
                    primaryKey: "ID",
                    foreignKey: "PID",
                    width: "1140px",
                    autofitLastColumn: false,
                    features: [
                        {
                            name: "MultiColumnHeaders"
                        },
                        {
                            name: "Paging",
                            mode: "allLevels",
                            pageSize: 100
                        },
                        {
                            name: "ColumnFixing",
                            fixingDirection: "left",
                            columnSettings: colsFixed
                        },
                        {
                            name: "Sorting",
                            type: "local",
                            applySortedColumnCss: false
                        }
                    ]
                })

                gridWidth = $("#grid_table_headers").width();
                gridWidth += $("#grid_table_headers_fixed").width();

                if (gridWidth > 1140)
                    gridWidth = 1140;

                $("#grid").igTreeGrid("option", "width", gridWidth + "px");

                $("#grid").igTreeGrid({
                    rowCollapsed: function (evt, ui) {
                        $("#grid_table_container").attr("style", "position: relative; height: 530px; width: " + gridWidth + "px;");
                    }
                });

            } else {
                alert(error);
            }

        }

        function UnitFormatter(val) {
            if (val > 0)
                return $.ig.formatter(val, "number");

            return "";
        }

        function PercentFormatter(val) {
            if (val > 0)
                return $.ig.formatter(val, "number", "percent");

            return "";
        }

        function PageFormatter(val) {
            if (val > 0)
                return $.ig.formatter(val, "number", "#,##0.###");

            return "";
        }

        function EvolFormatter(val) {

            if (val == "+Infinity")
                return '+<img src="../Content/img/g.gif" />';
            else if (val == "-Infinity")
                return '-<img src="../Content/img/r.gif" />';

            if (val > 0)
                return $.ig.formatter(val, "number", "percent") + '<img src="../Content/img/g.gif" />';

            if (val < 0)
                return $.ig.formatter(val, "number", "percent") + '<img src="../Content/img/r.gif" />';

            if (val == 0)
                return '<img src="../Content/img/o.gif" />';

            return '';
        }

        function DurationFormatter(val) {

            if (val == 0)
                return "";

            var s = val.toString();
            var nbToFillWithZero = 6 - s.length;
            for (var i = 0; i < nbToFillWithZero; i++)
                s = "0" + s;
            return s.substr(0, 2) + " H " + s.substr(2, 2) + " M " + s.substr(4, 2) + " S";
        }

        function GetColumnsFormatter(columns, unit) {

            if (columns != null) {

                columns.forEach(function (elem) {
                    if (elem.group != null && elem.group != 'undefined') {
                        for (var i = 0, len = elem.group.length; i < len; i++) {
                            if (elem.group[i].key.indexOf("unit") > -1) {
                                if (unit == "duration")
                                    elem.group[i].formatter = DurationFormatter;
                                else if (unit == "pages")
                                    elem.group[i].formatter = PageFormatter;
                                else
                                    elem.group[i].formatter = UnitFormatter;
                            }
                            if (elem.group[i].key.indexOf("evol") > -1) {
                                elem.group[i].formatter = EvolFormatter;
                            }
                            if (elem.group[i].key.indexOf("pdm") > -1) {
                                elem.group[i].formatter = PercentFormatter;
                            }
                        }
                    } else if (elem.key.indexOf("unit") > -1) {
                        if (unit == "duration")
                            elem.formatter = DurationFormatter;
                        else if (unit == "pages")
                            elem.formatter = PageFormatter;
                        else
                            elem.formatter = UnitFormatter;
                    } else if (elem.key.indexOf("evol") > -1) {
                        elem.formatter = EvolFormatter;
                    }
                    else if (elem.key.indexOf("pdm") > -1) {
                        elem.formatter = PercentFormatter;
                    }
                });

                return columns;
            }

            return columns;
        }

        function CallAnalysisResult() {
            $("#gridEmpty").hide();

            var params = {
                sortOrder: sortOrder,
                columnIndex: columnIndex
            };

            $.ajax({
                url: '@Url.Action("AnalysisResult", _controller)',
                contentType: "application/x-www-form-urlencoded",
                type: "POST",
                datatype: "json",
                data: params,
                error: function (xmlHttpRequest, errorText, thrownError) {
                },
                success: function (data) {
                    if (data != null && data != "") {
                        dataTreeGrid = data.datagrid;
                        cols = GetColumnsFormatter(data.columns, data.unit);
                        colsFixed = data.columnsfixed;
                        needFixedColumns = data.needfixedcolumns;

                        var schema = new $.ig.DataSchema("array", {
                            fields: data.schema
                        });

                        ds = new $.ig.DataSource({
                            type: "json",
                            schema: schema,
                            dataSource: dataTreeGrid,
                            callback: renderGrid
                        });

                        ds.dataBind();
                    }
                    else {
                        $("#gridLoader").addClass("hide");
                        $("#grid").addClass("hide");
                        $("#gridEmpty").show();
                    }
                }
            });
        }

        function CallSetOptions() {
            $.ajax({
                url: '@Url.Action("SetResultOptions", "Analysis")',
                contentType: "application/x-www-form-urlencoded",
                type: "POST",
                datatype: "json",
                data: userFilter,
                error: function (xmlHttpRequest, errorText, thrownError) {
                },
                success: function (data) {
                    CallAnalysisResult();
                }
            });
        }

        CallAnalysisResult();
        $('#export-type').removeClass("hide");
        $('#export-type').selectpicker();
        $('#btn-export').on('click', function (e) {
            var selectedValue = $('#export-type').val();
            switch (selectedValue) {
                case "1":
                    window.open('@Url.Action("Index", _exportController)', "_blank");
                    break;
                case "2":
                    window.open('@Url.Action("ResultBrut", _exportController)', "_blank");
                    break;
                default:
                    window.open('@Url.Action("Index", _exportController)', "_blank");
                    break;
            }
        });

        $('#mediaDetail').selectpicker();

        $('#mediaDetail').on('change', function (e) {
            userFilter.MediaDetailLevel.LevelDetailValue = $('#mediaDetail').val();
        });

        $('#productDetail').selectpicker();

        $('#productDetail').on('change', function (e) {
            userFilter.ProductDetailLevel.LevelDetailValue = $('#productDetail').val();
        });

        $('#resultType').selectpicker();

        $('#resultType').on('change', function (e) {
            userFilter.ResultTypeFilter.ResultType = $('#resultType').val();
        });

        if ($("#set-evol").prop('checked') == true) {
            userFilter.Evol = true;
        }
        else {
            userFilter.Evol = false;
        }

        $("#set-evol").click(function () {
            if ($(this).prop('checked') == true) {
                userFilter.Evol = true;
            }
            else {
                userFilter.Evol = false;
            }
        });

        if ($("#set-pdm").prop('checked') == true) {
            userFilter.PDM = true;
        }
        else {
            userFilter.PDM = false;
        }

        $("#set-pdm").click(function () {
            if ($(this).prop('checked') == true) {
                userFilter.PDM = true;
            }
            else {
                userFilter.PDM = false;
            }
        });

        if ($("#set-pdv").prop('checked') == true) {
            userFilter.PDV = true;
        }
        else {
            userFilter.PDV = false;
        }

        $("#set-pdv").click(function () {
            if ($(this).prop('checked') == true) {
                userFilter.PDV = true;
            }
            else {
                userFilter.PDV = false;
            }
        });

        $('#validate-options').on('click', function (e) {
            $("#grid").addClass("hide");
            $("#gridLoader").removeClass("hide");
            $("#collapseContainerOne").collapse('hide');
            CallSetOptions();
        });
    });
</script>
    
}
