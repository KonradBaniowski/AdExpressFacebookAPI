@model Km.AdExpressClientWeb.Models.Shared.InsertionCreativeViewModel
@using TNS.AdExpress.Domain.Translation;
@using TNS.AdExpress.Domain.Web;

@{
    ViewBag.Title = "Plan Media";
    Layout = "~/Views/Shared/_LayoutInsertionVersion.cshtml";
}

<link href="~/IgniteUI/css/structure/infragistics.css" rel="stylesheet" />
<link href="~/IgniteUI/css/themes/kantar/infragistics.theme.css" rel="stylesheet" />

<div class="h20">
</div>
<div class="row">
    <div class="col-md-12">
        <div class="pull-right custom-button selectexporttype">
            <select id="export-type" class="selectdatepicker hide">
                <option value="1">@Model.Labels.ExportFormattedResult</option>
                @if (!Model.IsAdNetTrack)
                {
                    <option value="2">@Model.Labels.ExportResultWithValue</option>
                    <option value="3">@Model.Labels.ExportGrossResult</option>
                }
            </select>&nbsp;
            <button class="btn btn-save" id="btn-export"><i class="fa fa-file-excel-o fa-file-excel-size"></i></button>&nbsp;
        </div>
    </div>
</div>
@*<div class="h20">
</div>*@
<div class="row">
    <div class="col-md-12">
        <div id="resultOptions">
            @Html.Action("ResultOptions", "MediaSchedulePopUp", new { isAdNetTrack = Model.IsAdNetTrack })
        </div>
    </div>
</div>
<div id="subPeriodSelection" class="h20">
</div>
<div id="msCreativesResult" class="hide">
</div>
<div class="row">
    <div class="col-md-12">
        <center>
            <div id="grid" class="hide">
            </div>
            <div id="gridMessage" class="hide"></div>
            <div id="gridLoader">
                <div class='uil-ring-css' style=''><div></div></div>
            </div>
        </center>
    </div>
</div>

@section Scripts {

    @switch (Model.SiteLanguage.ToString())
    {
        case TNS.AdExpress.Constantes.Web.CountryCode.FRANCE:
            <script src="~/IgniteUI/js/i18n/infragistics-fr.js"></script>
             <script src="~/IgniteUI/js/infragistics.core.js"></script>
             <script src="~/IgniteUI/js/infragistics.lob.js"></script>
             <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fr.js"></script>
            break;
        case TNS.AdExpress.Constantes.Web.CountryCode.UK:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-en.js"></script>
            if (WebApplicationParameters.CountryCode == TNS.AdExpress.Constantes.Web.CountryCode.FINLAND)
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fi.js"></script>
            }
            else
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-en.js"></script>
            }
            break;
        case TNS.AdExpress.Constantes.Web.CountryCode.FINLAND:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fi.js"></script>
            break;
        case TNS.AdExpress.Constantes.Web.CountryCode.SLOVAKIA:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-sk.js"></script>
            break;
        case TNS.AdExpress.Constantes.Web.CountryCode.TURKEY:
            <script src="~/IgniteUI/js/modules/i18n/infragistics.ui.grid-tr.js"></script>
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            break;
        default:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            if (WebApplicationParameters.CountryCode == TNS.AdExpress.Constantes.Web.CountryCode.FINLAND)
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fi.js"></script>
            }
            else
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-en.js"></script>
            }
            break;
    }

    <script>
        $(document).ready(function () {

            if (typeof jQuery === "undefined") { throw new Error("jQuery") }

            // Set text for select picker
            $.fn.selectpicker.defaults = {
                all: '@GestionWeb.GetWebWord(201, Model.SiteLanguage)'
            };

            $("#grid").igTreeGrid({
                primaryKey: "ClassifId",
                width: "100%",
                defaultColumnWidth: 200,
                avgRowHeight: 60,
                autoGenerateColumns: true
            });

            var ds;
            var cols;
            var colsFixed;
            var needFixedColumns = false;
            var zoomDate = '';
            var previousSubPeriodLabel;
            var hasMSCreatives = false;
            var creatives = [];
            var detailLevelSelectionType = '';
            var gridWidth;

            function GenericDetailLevelFilter() {
                this.DefaultDetailValue = $('#defaultDetail').val();
                this.CustomDetailValue = -1;
                this.L1DetailValue = -1;
                this.L2DetailValue = -1;
                this.L3DetailValue = -1;
                this.L4DetailValue = -1;
            }

            function PeriodDetailFilter() {
                this.PeriodDetailType = $('#periodDetailType').val();
            }

            function UserFilter() {
                this.GenericDetailLevelFilter = new GenericDetailLevelFilter();
                this.PeriodDetailFilter = new PeriodDetailFilter();
            }

            var userFilter = new UserFilter();

            function ParamsUrl() {
                this.Id = "@(Model.paramsUrl[0])";
                this.Level = "@(Model.paramsUrl[1])";
                this.ZoomDate = "@(Model.paramsUrl[2])";
                this.IdVehicle = "@(Model.paramsUrl[3])";
            }

            var paramsUrl = new ParamsUrl();

            var renderGrid = function (success, error) {
                if (success) {

                    $("#grid").igTreeGrid("destroy");
                    $("#gridLoader").addClass("hide");
                    $("#grid").removeClass("hide");
                    if (needFixedColumns) {
                        $("#grid").igTreeGrid({
                            dataSource: ds.dataView(),
                            columns: cols,
                            height: "580px",
                            autoGenerateColumns: false,
                            primaryKey: "ID_PRODUCT",
                            foreignKey: "PID",
                            width: "1140px",
                            features: [
                                {
                                    name: "MultiColumnHeaders"
                                },
                                {
                                    name: "Paging",
                                    mode: "allLevels",
                                    pageSize: 100
                                },
                                {
                                    name: "ColumnFixing",
                                    fixingDirection: "left",
                                    columnSettings: colsFixed
                                }
                            ]
                        })
                    }
                    else {
                        $("#grid").igTreeGrid({
                            dataSource: ds.dataView(),
                            columns: cols,
                            height: "530px",
                            autoGenerateColumns: false,
                            primaryKey: "ID_PRODUCT",
                            foreignKey: "PID",
                            features: [
                                {
                                    name: "MultiColumnHeaders"
                                },
                                {
                                    name: "Paging",
                                    mode: "allLevels",
                                    pageSize: 100
                                }
                            ]
                        })
                    }

                    gridWidth = $("#grid_table_container").width();

                    $("#grid").igTreeGrid({
                        rowCollapsed: function (evt, ui) {
                            $("#grid_table_container").attr("style", "position: relative; height: 530px; width: " + gridWidth + "px;");
                        }
                    });

                    //$("#grid").igTreeGrid({
                    //    rowCollapsed: function (evt, ui) {
                    //        $("#grid_table_container").attr("style", "position: relative; height: 530px;");
                    //    }
                    //});

                    $(".open-media-schedule").on('click', function (e) {
                        $("#perioddetailTypeContainer").removeClass("show").addClass("hide");
                        GetSubPeriodSelection('' + $(this).attr("date"));
                        $("#grid").addClass("hide");
                        $("#gridLoader").removeClass("hide");
                        CallMediaScheduleResult('' + $(this).attr("date"));
                    });
                } else {
                    alert(error);
                }

            }

            function UnitFormatter(val) {
                if (val > 0)
                    return $.ig.formatter(val, "number");

                return "";
            }

            function PageFormatter(val) {
                if (val > 0)
                    return $.ig.formatter(val, "number", "#,##0.###");

                return "";
            }

            function EvolFormatter(val) {
                //if (isNaN(val))
                //    return '';

                if (val == "+Infinity")
                    return '+<img src="../Content/img/g.gif" />';
                else if (val == "-Infinity")
                    return '-<img src="../Content/img/r.gif" />';

                if (val > 0)
                    return $.ig.formatter(val, "number", "percent") + '<img src="../Content/img/g.gif" />';

                if (val < 0)
                    return $.ig.formatter(val, "number", "percent") + '<img src="../Content/img/r.gif" />';

                if (val == 0)
                    return '<img src="../Content/img/o.gif" />';

                return '';
            }

            function DurationFormatter(val) {

                if (val == 0)
                    return "";

                var s = val.toString();
                var nbToFillWithZero = 6 - s.length;
                for (var i = 0; i < nbToFillWithZero; i++)
                    s = "0" + s;
                return s.substr(0, 2) + " H " + s.substr(2, 2) + " M " + s.substr(4, 2) + " S";
            }

            function GetColumnsFormatter(columns) {

                if (columns != null) {

                    columns.forEach(function (elem) {
                        if (elem.key.length > 0 && (elem.key.startsWith("PERIOD") || elem.key.startsWith("PERIOD_COMP"))) {
                            if (elem.key.endsWith("duration"))
                                elem.formatter = DurationFormatter;
                            else if (elem.key.endsWith("pages"))
                                elem.formatter = PageFormatter;
                            else
                                elem.formatter = UnitFormatter;
                        }
                        else if (elem.key.length > 0 && elem.key.startsWith("EVOL")) {
                            elem.formatter = EvolFormatter;
                        }
                    });

                    return columns;
                }

                return columns;
            }

            function CallMediaScheduleResult(zoomDateParam) {

                $("#gridMessage").addClass("hide");
                $("#msCreativesResult").addClass("hide");

                zoomDate = zoomDateParam;
                var params = {
                    id: paramsUrl.Id,
                    level: paramsUrl.Level,
                    zoomDate: zoomDateParam,
                    idVehicle: paramsUrl.IdVehicle
                };
                $.ajax({
                    url: '@Url.Action("MediaScheduleResult", "MediaSchedulePopUp")',
                    contentType: "application/x-www-form-urlencoded",
                    type: "POST",
                    datatype: "json",
                    data: params,
                    timeout: 300000, //5 min
                    error: function (xmlHttpRequest, errorText, thrownError) {
                        if (errorText == 'timeout') {
                            $("#gridLoader").addClass("hide");
                            $("#gridMessage").removeClass("hide");
                            $("#gridMessage").html("@Model.Labels.Timeout" + "<br\>" + "@Model.Labels.TimeoutBis");
                        }
                    },
                    success: function (data) {
                        if (data != null && data != "") {

                            if (data.hasMoreThanMaxRowsAllowed) {
                                $("#gridLoader").addClass("hide");
                                $("#gridMessage").removeClass("hide");
                                $("#gridEmpty").html("<div style='text-align:left'>@Model.Labels.MaxAllowedRows" + "<br\><ul><li>" + "@Model.Labels.MaxAllowedRowsBis" + "</li><li>" + "@Model.Labels.MaxAllowedRowsRefine" + "</li></ul></div>");
                            }
                            else {
                                dataTreeGrid = data.datagrid;
                                cols = GetColumnsFormatter(data.columns);
                                colsFixed = data.columnsfixed;
                                needFixedColumns = data.needfixedcolumns;
                                hasMSCreatives = data.hasMSCreatives;

                                if (hasMSCreatives)
                                    CallMSCreativesResult();
                                else
                                    $('#msCreativesResult').addClass("hide");

                                var schema = new $.ig.DataSchema("array", {
                                    fields: data.schema
                                });

                                ds = new $.ig.DataSource({
                                    type: "json",
                                    schema: schema,
                                    dataSource: dataTreeGrid,
                                    callback: renderGrid
                                });

                                ds.dataBind();
                            }
                        }
                        else {
                            $("#gridLoader").addClass("hide");
                            $("#gridMessage").removeClass("hide");
                            $("#gridMessage").html("@GestionWeb.GetWebWord(2106, Model.SiteLanguage)");
                        }
                    }
                });
            }

            CallMediaScheduleResult(paramsUrl.ZoomDate);
           
            function CallMSCreativesResult(zoomDateParam) {

                zoomDate = zoomDateParam;
                var params = {
                    zoomDate: zoomDateParam
                };

                $.ajax({
                    url: '@Url.Action("MSCreativesResult", "MediaSchedule")',
                    contentType: "application/x-www-form-urlencoded",
                    type: "POST",
                    datatype: "json",
                    data: params,
                    error: function (xmlHttpRequest, errorText, thrownError) {
                    },
                    success: function (data) {
                        $('#msCreativesResult').removeClass("hide");
                        $('#msCreativesResult').html(data);

                        creatives = [];
                        $("#creative-btn").prop('disabled', true);

                        AutoPlayCreativeModal();

                        $("#creative-btn").on('click', function (e) {
                            $('#msCreativesResult').addClass("hide");
                            var params = {
                                slogans: creatives
                            };
                            $.ajax({
                                url: '@Url.Action("SetMSCreatives", "MediaSchedule")',
                                contentType: "application/x-www-form-urlencoded",
                                type: "POST",
                                datatype: "json",
                                data: params,
                                error: function (xmlHttpRequest, errorText, thrownError) {
                                },
                                success: function (data) {
                                    creatives = [];
                                    $("#grid").addClass("hide");
                                    $("#gridLoader").removeClass("hide");
                                    $("#creative-btn").prop('disabled', true);
                                    CallMediaScheduleResult(zoomDate);
                                }
                            });
                        });

                        $("#undo-btn").on('click', function (e) {
                            $('#msCreativesResult').addClass("hide");
                            var params = {
                                slogans: []
                            };
                            $.ajax({
                                url: '@Url.Action("SetMSCreatives", "MediaSchedule")',
                                contentType: "application/x-www-form-urlencoded",
                                type: "POST",
                                datatype: "json",
                                data: params,
                                error: function (xmlHttpRequest, errorText, thrownError) {
                                },
                                success: function (data) {
                                    creatives = [];
                                    $("#grid").addClass("hide");
                                    $("#gridLoader").removeClass("hide");
                                    $("#creative-btn").prop('disabled', true);
                                    CallMediaScheduleResult(zoomDate);
                                }
                            });
                        });

                        $(".with-font").on('click', function (e) {
                            if ($(this).is(":checked")) {
                                creatives.push($(this).attr("value"));
                                $("#creativeNb").html(creatives.length);
                                $("#creativeNbLabel").html(" @GestionWeb.GetWebWord(3126, Model.SiteLanguage) &nbsp;");
                                $("#creative-btn").prop('disabled', false);
                            }
                            else {
                                creatives.remove($(this).attr("value"));

                                if (creatives.length == 0) {
                                    $("#creativeNb").html("");
                                    $("#creativeNbLabel").html(" @GestionWeb.GetWebWord(3122, Model.SiteLanguage) &nbsp;");
                                    $("#creative-btn").prop('disabled', true);
                                }
                                else {
                                    $("#creativeNb").html(creatives.length);
                                    $("#creativeNbLabel").html(" @GestionWeb.GetWebWord(3126, Model.SiteLanguage) &nbsp;");
                                }
                            }
                        });
                    }
                });
            }

            function CallSetOptions() {
                var params = {
                    userFilter: userFilter,
                    isAdNetTrack: '@Model.IsAdNetTrack'
                };

                $.ajax({
                    url: '@Url.Action("SetResultOptions", "MediaSchedulePopUp")',
                    contentType: "application/x-www-form-urlencoded",
                    type: "POST",
                    data: params,
                    datatype: "json",
                    //data: userFilter,
                    error: function (xmlHttpRequest, errorText, thrownError) {
                    },
                    success: function (data) {
                        CallMediaScheduleResult(paramsUrl.ZoomDate);
                    }
                });
            }

            function GetSubPeriodSelection(zoomDateParam) {
                var params = {
                    zoomDate: zoomDateParam
                };
                $.ajax({
                    url: '@Url.Action("SubPeriodSelection", "MediaSchedule")',
                    contentType: "application/x-www-form-urlencoded",
                    type: "POST",
                    data: params,
                    error: function (xmlHttpRequest, errorText, thrownError) {
                    },
                    success: function (data) {
                        if (data != null) {
                            $('#subPeriodSelection').html(data);
                            $('#leave-zoom').on('click', function (e) {
                                $("#perioddetailTypeContainer").removeClass("hide").addClass("show");
                                $("#leave-zoom").addClass("hide");
                                $("#sub-period-container").addClass("hide");
                                $("#grid").addClass("hide");
                                $("#gridLoader").removeClass("hide");
                                zoomDate = '';
                                CallMediaScheduleResult(zoomDate);
                            });
                            $(".sub-period-btn").on('click', function (e) {
                                $(".btn-default-sub-period").prop('disabled', false);
                                $(".btn-default-sub-period").attr('class', 'btn btn-default sub-period-btn');
                                $(this).attr('class', 'btn btn-default-sub-period sub-period-btn');
                                $(this).prop('disabled', true);
                                $("#grid").addClass("hide");
                                $("#gridLoader").removeClass("hide");
                                CallMediaScheduleResult($(this).attr("period"));
                            });
                            $(".sub-period-btn").on('mouseenter', function (e) {
                                previousSubPeriodLabel = $(".btn-default-sub-period").attr("periodlabel");
                                $("#subPeriodLabel").text($(this).attr("periodlabel"));
                            });
                            $(".sub-period-btn").on('mouseleave', function (e) {
                                $("#subPeriodLabel").text(previousSubPeriodLabel);
                            });
                        }
                    }
                });
            }

            function AutoPlayCreativeModal() {

                $("#creativeStream").attr('src', '');

                $("#creativeModal").on('shown.bs.modal', function (event) {
                    var button = $(event.relatedTarget);// Button that triggered the modal
                    var datas = button.data('creative').toString(); // Extract info from data-* attributes
                    datas = datas.replace(/\[|\]/g, '');
                    datas = datas.split(",");

                    if (datas[0] === null || datas[0] == "" || datas[0] == 0 || datas[0] == "0") {
                        alert("Les fichiers média ne sont pas disponibles.");
                    }
                    else {
                        var parameters = {
                            idVersion: datas[0],
                            idVehicle: datas[2]
                        };
                        $.ajax({
                            url: '@Url.Action("GetCreativePath", "Insertions")',
                            contentType: "application/x-www-form-urlencoded",
                            type: 'POST',
                            datatype: 'JSON',
                            data: parameters,
                            error: function (xmlHttpRequest, errorText, thrownError) {
                                alert("Erreur lors de la recuperation de url de la version");
                            },
                            success: function (response) {
                                if (response != null) {
                                    var url = response.PathReadingFile;
                                    var urlDowload = response.PathDownloadingFile;
                                    if (url) {
                                        $("#creativeStream").attr('src', url);
                                        $('#creativeModal h4').text("Spot");
                                        $("#mediaLoader").addClass("hide");
                                    }
                                }
                            }
                        });
                    }
                });

                $("#creativeModal").on('hide.bs.modal', function () {
                    $("#creativeStream").attr('src', '');
                    $("#mediaLoader").removeClass("hide");
                });
            }

            function InitControls() {

                $('#periodDetailType').selectpicker();

                $('#periodDetailType').on('change', function (e) {
                    userFilter.PeriodDetailFilter.PeriodDetailType = $('#periodDetailType').val();
                });

                $('#export-type').removeClass("hide");
                $('#export-type').selectpicker();

                @if(Model.IsAdNetTrack)
                {
                    <text>
                    $('#btn-export').on('click', function (e) {
                        var selectedValue = $('#export-type').val();
                        switch (selectedValue) {
                            case "1":
                                window.open('@Html.Raw(Url.Action("ResultBrutAdnetTrack", "TestExport", new { id = Model.paramsUrl[0], level = Model.paramsUrl[1], zoomDate = Model.paramsUrl[2], idVehicle = Model.paramsUrl[3] }))', "_blank");
                                break;
                            default:
                                window.open('@Html.Raw(Url.Action("ResultBrutAdnetTrack", "TestExport", new { id = Model.paramsUrl[0], level = Model.paramsUrl[1], zoomDate = Model.paramsUrl[2], idVehicle = Model.paramsUrl[3] }))', "_blank");
                                break;
                        }
                    });
                    </text>
                }
                else
                {
                    <text>
                    $('#btn-export').on('click', function (e) {
                        var selectedValue = $('#export-type').val();
                        switch (selectedValue) {
                            case "1":
                                window.open('@Url.Action("Index", "TestExport")', "_blank");
                                break;
                            case "2":
                                window.open('@Url.Action("ResultValue", "TestExport")', "_blank");
                                break;
                            case "3":
                                window.open('@Url.Action("ResultBrut", "TestExport")', "_blank");
                                break;
                            default:
                                window.open('@Url.Action("Index", "TestExport")', "_blank");
                                break;
                        }
                    });
                    </text>
                }

                $('#save-custom-detail-levels').on('click', function (e) {
                    var levels = $('#l1Detail').val() + ',' + $('#l2Detail').val() + ',' + $('#l3Detail').val() + ',' + $('#l4Detail').val();
                    var type = 1;

                    var params = {
                        levels: levels,
                        type: type
                    };
                    $.ajax({
                        url: '@Url.Action("SaveCustomDetailLevels", "MediaSchedule")',
                        contentType: "application/x-www-form-urlencoded",
                        type: "POST",
                        datatype: "json",
                        data: params,
                        error: function (xmlHttpRequest, errorText, thrownError) {
                        },
                        success: function (data) {
                            if (data != null && data != "") {
                                if (data.Id > 0) {
                                    $("#customDetail")
                                    .append('<option value="' + data.Id + '">' + data.Label + '</option>')
                                    .selectpicker('refresh');
                                }
                                bootbox.alert(data.Message);
                            }
                        }
                    });
                });

                $('#remove-custom-detail-levels').on('click', function (e) {
                    var detailLevel = $('#customDetail').val();

                    var params = {
                        detailLevel: detailLevel
                    };
                    $.ajax({
                        url: '@Url.Action("RemoveCustomDetailLevels", "MediaSchedule")',
                        contentType: "application/x-www-form-urlencoded",
                        type: "POST",
                        datatype: "json",
                        data: params,
                        error: function (xmlHttpRequest, errorText, thrownError) {
                        },
                        success: function (data) {
                            if (data != null && data != "") {
                                if (!(data.Message.indexOf("Impossible") > -1)) {
                                    $('#customDetail').find('[value=' + detailLevel + ']').remove();
                                    $('#customDetail').selectpicker('refresh');
                                }
                                bootbox.alert(data.Message);
                            }
                        }
                    });
                });

                $('#validate-options').on('click', function (e) {
                    $("#grid").addClass("hide");
                    $("#gridLoader").removeClass("hide");
                    $("#collapseContainerOne").collapse('hide');

                    SloganDisplayFilter();
                    PeriodTypeFilter();

                    CallSetOptions();
                });

                $('#defaultDetail').selectpicker();
                $('#customDetail').selectpicker();
                $('#l1Detail').selectpicker();
                $('#l2Detail').selectpicker();
                $('#l3Detail').selectpicker();
                $('#l4Detail').selectpicker();

                $('#defaultDetail').on('change', function (e) {
                    detailLevelSelectionType = 'defaultDetail';
                    $('#customDetail').selectpicker('val', '-1');
                    $('#l1Detail').selectpicker('val', '-1');
                    $('#l2Detail').selectpicker('val', '-1');
                    $('#l3Detail').selectpicker('val', '-1');
                    $('#l4Detail').selectpicker('val', '-1');
                    InitGenericDetailLevelFilter();
                    userFilter.GenericDetailLevelFilter.DefaultDetailValue = $('#defaultDetail').val();
                });

                $('#customDetail').on('change', function (e) {
                    detailLevelSelectionType = 'customDetail';
                    $('#defaultDetail').selectpicker('val', '-1');
                    $('#l1Detail').selectpicker('val', '-1');
                    $('#l2Detail').selectpicker('val', '-1');
                    $('#l3Detail').selectpicker('val', '-1');
                    $('#l4Detail').selectpicker('val', '-1');
                    InitGenericDetailLevelFilter();
                    userFilter.GenericDetailLevelFilter.CustomDetailValue = $('#customDetail').val();
                });

                function ResetLnLevel(lx, ly) {
                    if ($(lx).val() == $(ly).val()) {
                        $(ly).selectpicker('val', '-1');
                        switch (ly) {
                            case "#l1Detail":
                                userFilter.GenericDetailLevelFilter.L1DetailValue = -1;
                                break;
                            case "#l2Detail":
                                userFilter.GenericDetailLevelFilter.L2DetailValue = -1;
                                break;
                            case "#l3Detail":
                                userFilter.GenericDetailLevelFilter.L3DetailValue = -1;
                                break;
                            case "#l4Detail":
                                userFilter.GenericDetailLevelFilter.L4DetailValue = -1;
                                break;
                        }
                    }
                }

                $('#l1Detail').on('change', function (e) {
                    detailLevelSelectionType = 'lxDetail';
                    $('#customDetail').selectpicker('val', '-1');
                    $('#defaultDetail').selectpicker('val', '-1');
                    userFilter.GenericDetailLevelFilter.DefaultDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.CustomDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L1DetailValue = $('#l1Detail').val();
                    ResetLnLevel("#l1Detail", "#l2Detail");
                    ResetLnLevel("#l1Detail", "#l3Detail");
                    ResetLnLevel("#l1Detail", "#l4Detail");
                });

                $('#l2Detail').on('change', function (e) {
                    detailLevelSelectionType = 'lxDetail';
                    $('#customDetail').selectpicker('val', '-1');
                    $('#defaultDetail').selectpicker('val', '-1');
                    userFilter.GenericDetailLevelFilter.DefaultDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.CustomDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L2DetailValue = $('#l2Detail').val();
                    ResetLnLevel("#l2Detail", "#l1Detail");
                    ResetLnLevel("#l2Detail", "#l3Detail");
                    ResetLnLevel("#l2Detail", "#l4Detail");
                });

                $('#l3Detail').on('change', function (e) {
                    detailLevelSelectionType = 'lxDetail';
                    $('#customDetail').selectpicker('val', '-1');
                    $('#defaultDetail').selectpicker('val', '-1');
                    userFilter.GenericDetailLevelFilter.DefaultDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.CustomDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L3DetailValue = $('#l3Detail').val();
                    ResetLnLevel("#l3Detail", "#l1Detail");
                    ResetLnLevel("#l3Detail", "#l2Detail");
                    ResetLnLevel("#l3Detail", "#l4Detail");
                });

                $('#l4Detail').on('change', function (e) {
                    detailLevelSelectionType = 'lxDetail';
                    $('#customDetail').selectpicker('val', '-1');
                    $('#defaultDetail').selectpicker('val', '-1');
                    userFilter.GenericDetailLevelFilter.DefaultDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.CustomDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L4DetailValue = $('#l4Detail').val();
                    ResetLnLevel("#l4Detail", "#l1Detail");
                    ResetLnLevel("#l4Detail", "#l2Detail");
                    ResetLnLevel("#l4Detail", "#l3Detail");
                });

                function InitGenericDetailLevelFilter() {
                    userFilter.GenericDetailLevelFilter.DefaultDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.CustomDetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L1DetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L2DetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L3DetailValue = -1;
                    userFilter.GenericDetailLevelFilter.L4DetailValue = -1;
                }

                function PeriodTypeFilter() {

                    if ($('#periodDetailType').val() != 0)
                        HideSloganLevel();
                    else
                        ShowSloganLevel();
                }

                function HideSloganLevel() {
                    $(".slogan-level").hide();
                }

                function ShowSloganLevel() {
                    $(".slogan-level").show();
                }

                function SloganDisplayFilter() {

                    switch (detailLevelSelectionType) {
                        case 'defaultDetail':
                            var sloganValues = [];
                            $("#defaultDetail").find(".slogan-level").each(function (key, val) { sloganValues.push($(this).attr("value")) });
                            if (sloganValues.indexOf(userFilter.GenericDetailLevelFilter.DefaultDetailValue) !== -1) {
                                $('#defaultDetail').selectpicker('val', '0');
                                userFilter.GenericDetailLevelFilter.DefaultDetailValue = 0;
                            }
                            break;
                        case 'customDetail':
                            break;
                        case 'lxDetail':
                            break;
                    }

                }

                Array.prototype.remove = function (value) {
                    if (this.indexOf(value) !== -1) {
                        this.splice(this.indexOf(value), 1);
                        return true;
                    } else {
                        return false;
                    };
                }

                if (!Array.indexOf) {
                    Array.prototype.indexOf = function (obj) {
                        for (var i = 0; i < this.length; i++) {
                            if (this[i] == obj) {
                                return i;
                            }
                        }
                        return -1;
                    };
                }
            }

            InitControls();
        });


</script>
}