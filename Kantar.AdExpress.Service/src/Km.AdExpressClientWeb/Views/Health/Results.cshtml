@model Km.AdExpressClientWeb.Models.Shared.ResultsViewModel
@using TNS.AdExpress.Domain.Translation;
@using TNS.AdExpress.Domain.Web;
@{
    ViewBag.Title = "Results";
    var _controller = "Health";
    Layout = "~/Views/Shared/_LayoutResults.cshtml";
    var HealthResults = string.Format("/{0}/Results", _controller);
}

<link href="~/IgniteUI/css/structure/infragistics.css" rel="stylesheet" />
<link href="~/IgniteUI/css/themes/kantar/infragistics.theme.css" rel="stylesheet" />

<div class="row">
    @Html.Partial("Presentation", Model.Presentation)
    @Html.Partial("DetailSelection")
    @Html.Hidden("ExportController", "HealthExport")
    @Html.HiddenFor(e => e.Labels.ResultError)
    @Html.HiddenFor(e => e.Labels.WarningBackNavigator)
    <div class="col-lg-12 col-md-12 col-sm-12 col-xs-12 margin-top-10">
        <div class="row row-sm">
            @Html.Partial("NavigationBar", Model.NavigationBar)
        </div>
    </div>
</div>
<div class="h20">
</div>
<div class="row">
    <div class="col-md-12">
        <center>
            <p id="gridEmpty" style="display:none">@GestionWeb.GetWebWord(2106, Model.Presentation.SiteLanguage)</p>
            <div id="dataSelector" style="float: left;"></div>
            <div id="pivotGrid" class="hide" style="float: left;">
                Chargement...
            </div>
            <div id="gridLoader">
                <div class='uil-ring-css' style='transform:scale(0.54);'><div></div></div>
            </div>
        </center>
    </div>
</div>
<div id="resultModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
        </div>
    </div>
</div>
<div id="alertModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
        </div>
    </div>
</div>
<div id="exportResultModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
        </div>
    </div>
</div>
<input type="hidden" id="current-url" value="@HealthResults" />
@section Scripts {
    @switch (Model.Presentation.SiteLanguage.ToString())
    {
        case TNS.AdExpress.Constantes.Web.CountryCode.FRANCE:
            <script src="~/IgniteUI/js/i18n/infragistics-fr.js"></script>
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fr.js"></script>
            break;
        case TNS.AdExpress.Constantes.Web.CountryCode.UK:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-en.js"></script>
            if (WebApplicationParameters.CountryCode == TNS.AdExpress.Constantes.Web.CountryCode.FINLAND)
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fi.js"></script>
            }
            else
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-en.js"></script>
            }
            break;
        case TNS.AdExpress.Constantes.Web.CountryCode.FINLAND:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fi.js"></script>
            break;
        default:
            <script src="~/IgniteUI/js/infragistics.core.js"></script>
            <script src="~/IgniteUI/js/infragistics.lob.js"></script>
            if (WebApplicationParameters.CountryCode == TNS.AdExpress.Constantes.Web.CountryCode.FINLAND)
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-fi.js"></script>
            }
            else
            {
                <script src="~/IgniteUI/js/modules/i18n/regional/infragistics.ui.regional-en.js"></script>
            }
            break;
    }
    @Scripts.Render("~/bundles/results")
    <script>
        //{columnKey: 'Address', allowHiding: false, hidden: true}
        $(document).ready(function () {

            if (typeof jQuery === "undefined") { throw new Error("jQuery") }

            // Set text for select picker
            $.fn.selectpicker.defaults = {
                all: '@GestionWeb.GetWebWord(201, Model.Presentation.SiteLanguage)'
            };

            var ds;

            var sum = function (name) {
                return function (items, cellMetadata) {
                    var sum = 0, i, areAllNullOrUndefined = true, value;
                    for (i = 0; i < items.length; i++) {
                        value = items[i][name];
                        if (value !== null && value !== undefined) {
                            areAllNullOrUndefined = false;
                            sum += value;
                        }
                    }
                    if (areAllNullOrUndefined)
                        return null;
                    else
                        // Here you can format the value as desired!
                        return $.ig.formatter(sum, "number", "#,##0");;
                }
            };

            //var renderGrid = function (success, error) {
            //    if (success) {

            //    } else {
            //        alert(error);
            //    }

            //}


            function CallHealthResult() {
                $("#gridEmpty").hide();
                $.ajax({
                    url: '@Url.Action("HealthResult", _controller)',
                    contentType: "application/x-www-form-urlencoded",
                    type: "POST",
                    datatype: "json",
                    timeout: 300000, //5 min
                    error: function (xmlHttpRequest, errorText, thrownError) {
                        if (errorText == 'timeout') {
                            $("#gridLoader").addClass("hide");
                            $("#gridEmpty").show();
                            $("#gridEmpty").html("@Model.Labels.Timeout" + "<br\>" + "@Model.Labels.TimeoutBis");
                        }
                        else {
                            message = $('#Labels_ResultError').val() + '. ' + $('#Labels_WarningBackNavigator').val();
                            bootbox.alert(message);
                            $("#gridLoader").addClass("hide");
                        }
                    },
                    success: function (data) {
                        if (data != null && data != "") {

                            dataPivotGrid = data.datapivotgrid;

                            ds = new $.ig.OlapFlatDataSource({
                                dataSourceType: "json",
                                metadata: {
                                    cube: {
                                        name: "Health",
                                        caption: "Health",
                                        measuresDimension: {
                                            caption: "Unité",
                                            measures: [//for each measure, name and aggregator are required
                                                {
                                                    caption: "Euro", name: "Euro",
                                                    // returns a function that will be used as sum aggregator on the 'UnitsSold property' of the data objects
                                                    aggregator: sum("Euro")

                                                }
                                            ]
                                        },
                                        dimensions: [ // for each dimension name and hierarchies are required
                                             {
                                                 caption: "Date", name: "Date", /*displayFolder: "Folder1\\Folder2",*/ hierarchies: [
                                                     $.ig.OlapUtilities.prototype.getDateHierarchy(
                                                         "Date", // the source property name
                                                         ["year", "quarter", "month", "date"], // the date parts for which levels will be generated (optional)
                                                         "Dates", // The name for the hierarchy (optional)
                                                         "Date", // The caption for the hierarchy (optional)
                                                         ["Year", "Quarter", "Month", "Day"], // the captions for the levels (optional)
                                                         "All Periods") // the root level caption (optional)
                                                 ]
                                             },
                                            {
                                                caption: "Media", name: "Canal", hierarchies: [{
                                                    caption: "Media", name: "Canal", levels: [
                                                        //{
                                                        //    name: "TotalCanal", levelCaption: "Tous Medias", caption: "Tous Medias",
                                                        //    memberProvider: function (item) { return "Tous Media"; }
                                                        //},
                                                        {
                                                            name: "Canal", levelCaption: "Media", caption: "Media",
                                                            memberProvider: function (item) { return item.Canal; }
                                                        }]
                                                }]
                                            },
                                             {
                                                 caption: "Categorie", name: "Category", hierarchies: [{
                                                     caption: "Categorie", name: "Category", levels: [
                                                         //{
                                                         //    name: "TotalCategory", caption: "Toutes Categories",
                                                         //    memberProvider: function (item) { return "Tous Canaux"; }
                                                         //},
                                                         {
                                                             name: "Categorie", caption: "Category",
                                                             memberProvider: function (item) { return item.Category; }
                                                         }]
                                                 }]
                                             },
                                             {
                                                 caption: "Medecin", name: "Specialist", hierarchies: [{
                                                     caption: "Categorie", name: "Specialist", levels: [
                                                         //{
                                                         //    name: "TotalSpecialist", caption: "Toutes Medecins",
                                                         //    memberProvider: function (item) { return "Tous Medecins"; }
                                                         //},
                                                         {
                                                             name: "Specialist", caption: "Medecin",
                                                             memberProvider: function (item) { return item.Specialist; }
                                                         }]
                                                 }]
                                             },
                                             {
                                                 caption: "Groupe", name: "GrpPharma", hierarchies: [{
                                                     caption: "Groupe", name: "GrpPharma", levels: [
                                                         //{
                                                         //    name: "TotalGrpPharma", caption: "Tous Groupes",
                                                         //    memberProvider: function (item) { return "Tous Groupes"; }
                                                         //},
                                                         {
                                                             name: "GrpPharma", caption: "Groupe",
                                                             memberProvider: function (item) { return item.GrpPharma; }
                                                         }]
                                                 }]
                                             },
                                             {
                                                 caption: "Laboratoire", name: "Laboratory", hierarchies: [{
                                                     caption: "Laboratoire", name: "Laboratory", levels: [
                                                         //{
                                                         //    name: "TotalLaboratory", caption: "Tous Laboratoires",
                                                         //    memberProvider: function (item) { return "Tous Laboratoires"; }
                                                         //},
                                                         {
                                                             name: "Laboratory", caption: "Laboratoire",
                                                             memberProvider: function (item) { return item.Laboratory; }
                                                         }]
                                                 }]
                                             },
                                               {
                                                   caption: "Produit", name: "Product", hierarchies: [{
                                                       caption: "Produit", name: "Product", levels: [
                                                           //{
                                                           //    name: "TotalProduct", caption: "Tous Produits",
                                                           //    memberProvider: function (item) { return "Tous Produits"; }
                                                           //},
                                                           {
                                                               name: "Product", caption: "Produit",
                                                               memberProvider: function (item) { return item.Product; }
                                                           }]
                                                   }]
                                               }
                                               ,
                                               {
                                                   caption: "Format", name: "Format", hierarchies: [{
                                                       caption: "Format", name: "Format", levels: [
                                                           //{
                                                           //    name: "TotalFormat", caption: "Tous Formats",
                                                           //    memberProvider: function (item) { return "Tous Formats"; }
                                                           //},
                                                           {
                                                               name: "Format", caption: "Format",
                                                               memberProvider: function (item) { return item.Format; }
                                                           }]
                                                   }]
                                               },
                                        ]

                                    }
                                },
                                // Preload hierarchies for the rows, columns, filters and measures
                                rows: "[Canal].[Canal]",
                                columns: "[Date].[Dates]",
                                measures: "[Measures].[Euro]",
                                dataSource: dataPivotGrid,
                            });


                            $('#dataSelector').igPivotDataSelector({
                                dataSource: ds,
                                height: "565px",
                                width: "230px"
                            });


                            $("#gridLoader").addClass("hide");
                            $("#pivotGrid").removeClass("hide");
                            $('#dataSelector').igPivotDataSelector({
                                dataSource: ds,
                                height: "565px",
                                width: "230px"
                            });
                            $("#pivotGrid").igPivotGrid({
                                gridOptions: {
                                    defaultColumnWidth: 200,
                                    features: [
                                         {
                                             name: "Selection"
                                         },
                                         {
                                             name: "Tooltips",
                                             visibility: "always"
                                         },
                                         {
                                             name: "Resizing"
                                         }
                                    ]
                                },
                                allowSorting: true,
                                allowHeaderRowsSorting: true,
                                allowHeaderColumnsSorting: true,
                                firstSortDirection: "ascending",
                                firstLevelSortDirection: "ascending",
                                levelSortDirections: [
                                    { levelUniqueName: "[Date].[Dates].[year]", sortDirection: "descending" },
                                    { levelUniqueName: "[Canal].[Canal].[Canal]" }
                                ],
                                dataSource: ds,
                                dataSourceInitialized: function (evt, ui) {
                                    // in the row axis in the first tuple, expand the first member
                                    $("#pivotGrid").igPivotGrid("expandTupleMember", "rowAxis", 0, 0, false);
                                    // in the column axis in the first tuple, expand the first member
                                    $("#pivotGrid").igPivotGrid("expandTupleMember", "columnAxis", 0, 0, true);
                                },
                                height: "565px",
                                width: "900px"
                            });

                        }
                        else {
                            $("#gridLoader").addClass("hide");
                            $("#grid").addClass("hide");
                            $("#gridEmpty").show();
                        }
                    }
                });
            }

            CallHealthResult();


        });


    </script>
    @Scripts.Render("~/bundles/detail-selection")
}